syntax = "proto2";

package yamcs.protobuf.web;

option java_package = "org.yamcs.web.api";
option java_outer_classname = "WebProto";
option java_multiple_files = true;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

import "yamcs/api/annotations.proto";
 
service WebApi {

  // Get web configuration for an instance
  rpc GetInstanceConfiguration(GetInstanceConfigurationRequest) returns (InstanceConfiguration) {
    option (yamcs.api.route) = {
      get: "/api/web/instance-config/{instance}"
    };
  }

  // List queries for a resource
  rpc ListQueries(ListQueriesRequest) returns (ListQueriesResponse) {
    option (yamcs.api.route) = {
      get: "/api/web/queries/{instance}/{resource}"
    };
  }

  // Create a query on a target resource
  rpc CreateQuery(CreateQueryRequest) returns (QueryInfo) {
    option (yamcs.api.route) = {
      post: "/api/web/queries/{instance}/{resource}"
      body: "*"
    };
  }

  // Update a query
  rpc UpdateQuery(UpdateQueryRequest) returns (QueryInfo) {
    option (yamcs.api.route) = {
      patch: "/api/web/queries/{instance}/{resource}/{id}"
      body: "*"
    };
  }

  // Delete a query
  rpc DeleteQuery(DeleteQueryRequest) returns (google.protobuf.Empty) {
    option (yamcs.api.route) = {
      delete: "/api/web/queries/{instance}/{resource}/{id}"
    };
  }

  // Parses a resource filter query
  //
  // This operation was added to assist yamcs-web in using the
  // server-side implementation to parse query filters, while the
  // client-side implementation is not sufficiently complete.
  //
  // It is modeled as a WebSocket, to avoid an abundance of ignorable
  // requests and 404 warnings in the server log.
  rpc ParseFilter(stream ParseFilterRequest) returns (stream ParseFilterData) {
    option (yamcs.api.websocket) = {
      topic: "web.parse-filter"
    };
  }
}

message GetInstanceConfigurationRequest {
  // Yamcs instance name
  optional string instance = 1;
}

message InstanceConfiguration {
  // Bucket where to find display resources
  optional string displayBucket = 1;

  // Bucket where to find stacks
  optional string stackBucket = 2;
}

message ListQueriesRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Resource identifier
  optional string resource = 2;
}

message ListQueriesResponse {

  // Matching queries
  repeated QueryInfo queries = 1;
}

message CreateQueryRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Resource identifier
  optional string resource = 2;

  // Query name
  optional string name = 3;

  // If true, everyone can use query, else this
  // query is owned by the requesting user
  optional bool shared = 4;

  // Query definition
  optional google.protobuf.Struct query = 5;
}

message UpdateQueryRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Resource identifier
  optional string resource = 2;

  // Query identifier
  optional string id = 3;

  // Query name
  optional string name = 4;

  // If true, everyone can use query, else this
  // query is owned by the requesting user
  optional bool shared = 5;

  // Query definition
  optional google.protobuf.Struct query = 6;
}

message DeleteQueryRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Resource identifier
  optional string resource = 2;

  // Query identifier
  optional string id = 3;
}

message QueryInfo {

  // Query identifier
  optional string id = 1;

  // Query name
  optional string name = 2;

  // If true, everyone can use query, else this
  // query is owned by the requesting user  
  optional bool shared = 3;

  // Query definition
  optional google.protobuf.Struct query = 4;
}

message ParseFilterRequest {
  optional string resource = 1;
  optional string filter = 2;
}

message ParseFilterData {
  optional string errorMessage = 1;
  optional int32 beginLine = 2;
  optional int32 beginColumn = 3;
  optional int32 endLine = 4;
  optional int32 endColumn = 5;
}
