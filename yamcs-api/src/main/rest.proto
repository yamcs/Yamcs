package rest;
option java_package = "org.yamcs.protobuf";

import "yamcs.proto";
import "commanding.proto";
import "pvalue.proto";

// Generic holder for an exception
message RestExceptionMessage {
  optional string type=1;
  optional string msg=2;
}

message RestArgumentType {
  optional string name=1;
  optional string value=2;
}

message RestCommandType {
  optional string origin=1;
  optional int32 sequenceNumber=2;
  optional yamcs.NamedObjectId id=3;
  repeated RestArgumentType arguments=4;
}

message RestListAvailableParametersRequest {
  repeated string namespaces=1; // if not available, all the namespaces
}

message RestListAvailableParametersResponse {
  repeated yamcs.NamedObjectId ids=2;
}

message RestValidateCommandRequest {
  repeated RestCommandType commands=1;
}

message RestValidateCommandResponse {
}

message RestDumpRawMdbRequest {
}

message RestDumpRawMdbResponse {
  optional bytes rawMdb=2;
}

message RestSetParameterResponse {
}

message RestGetParameterRequest {
    repeated yamcs.NamedObjectId list=1;
    optional bool fromCache=2;
    optional uint64 timeout=3; //if not from cache, wait this time (in milliseconds) to receive the parameter
}

message RestDumpArchiveRequest {
  // Time specification (assumed Yamcs internal time)
  optional int64 start=1;
  optional int64 stop=2;

  // At least one of the following request types should be added
  optional yamcs.ParameterReplayRequest parameterRequest=3;
  optional yamcs.PacketReplayRequest packetRequest=4;
  optional yamcs.EventReplayRequest eventRequest=5;
  optional yamcs.CommandHistoryReplayRequest commandHistoryRequest=6;
  optional yamcs.PpReplayRequest ppRequest=7;

  // By default the response will be aggregated on the server and only when fully
  // built be sent to the client. This has a limitation of 1MB though.
  // You can circumvent this limitation by enabling the stream-option, see the
  // wiki for more details on this.
  optional bool stream=8;
}

message RestDumpArchiveResponse {
  repeated pvalue.ParameterData parameterData=2;
  repeated yamcs.TmPacketData packetData=3;
  repeated commanding.CommandHistoryEntry command=4;
  repeated yamcs.Event event=5;
  repeated pvalue.ParameterData ppData=6;
}

message RestSendCommandRequest {
  repeated RestCommandType commands=1;
}

message RestSendCommandResponse {
}

service RESTService {
  rpc listAvailableParameters(RestListAvailableParametersRequest) returns (RestListAvailableParametersResponse);
  rpc validateCommand(RestValidateCommandRequest) returns (RestValidateCommandResponse);
  rpc sendCommand(RestSendCommandRequest) returns (RestSendCommandResponse);
  rpc dumpRawMdb(RestDumpRawMdbRequest) returns (RestDumpRawMdbResponse);
  rpc dumpArchive(RestDumpArchiveRequest) returns (RestDumpArchiveResponse);
}
