// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from commanding.proto

package org.yamcs.protobuf;


public final class SchemaCommanding
{

    public static final class CommandId
    {
        public static final org.yamcs.protobuf.SchemaCommanding.CommandId.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaCommanding.CommandId.MessageSchema();
        public static final org.yamcs.protobuf.SchemaCommanding.CommandId.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaCommanding.CommandId.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandId>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandId message) throws java.io.IOException
            {
                if(message.hasGenerationTime())
                    output.writeInt64(1, message.getGenerationTime(), false);
                if(message.hasOrigin())
                    output.writeString(2, message.getOrigin(), false);
                if(message.hasSequenceNumber())
                    output.writeInt32(3, message.getSequenceNumber(), false);
                if(message.hasCommandName())
                    output.writeString(4, message.getCommandName(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandId message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandId.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandId.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandId> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandId.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandId.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandId.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandId message) throws java.io.IOException {}
            public org.yamcs.protobuf.Commanding.CommandId newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandId.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandId.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setGenerationTime(input.readInt64());
                            break;
                        case 2:
                            builder.setOrigin(input.readString());
                            break;
                        case 3:
                            builder.setSequenceNumber(input.readInt32());
                            break;
                        case 4:
                            builder.setCommandName(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandId.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Commanding.CommandId.Builder newMessage()
            {
                return org.yamcs.protobuf.Commanding.CommandId.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandId.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandId.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandId.Builder> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandId.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandId.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandId.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandId.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "generationTime";
                case 2: return "origin";
                case 3: return "sequenceNumber";
                case 4: return "commandName";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("generationTime", 1);
            fieldMap.put("origin", 2);
            fieldMap.put("sequenceNumber", 3);
            fieldMap.put("commandName", 4);
        }
    }

    public static final class CommandQueueInfo
    {
        public static final org.yamcs.protobuf.SchemaCommanding.CommandQueueInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaCommanding.CommandQueueInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaCommanding.CommandQueueInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaCommanding.CommandQueueInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandQueueInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandQueueInfo message) throws java.io.IOException
            {
                if(message.hasInstance())
                    output.writeString(1, message.getInstance(), false);
                if(message.hasChannelName())
                    output.writeString(2, message.getChannelName(), false);
                if(message.hasName())
                    output.writeString(3, message.getName(), false);
                if(message.hasState())
                    output.writeEnum(4, message.getState().getNumber(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandQueueInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandQueueInfo> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandQueueInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Commanding.CommandQueueInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandQueueInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandQueueInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setInstance(input.readString());
                            break;
                        case 2:
                            builder.setChannelName(input.readString());
                            break;
                        case 3:
                            builder.setName(input.readString());
                            break;
                        case 4:
                            builder.setState(org.yamcs.protobuf.Commanding.QueueState.valueOf(input.readEnum()));
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandQueueInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Commanding.CommandQueueInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandQueueInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandQueueInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "instance";
                case 2: return "channelName";
                case 3: return "name";
                case 4: return "state";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("instance", 1);
            fieldMap.put("channelName", 2);
            fieldMap.put("name", 3);
            fieldMap.put("state", 4);
        }
    }

    public static final class CommandQueueEntry
    {
        public static final org.yamcs.protobuf.SchemaCommanding.CommandQueueEntry.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaCommanding.CommandQueueEntry.MessageSchema();
        public static final org.yamcs.protobuf.SchemaCommanding.CommandQueueEntry.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaCommanding.CommandQueueEntry.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandQueueEntry>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandQueueEntry message) throws java.io.IOException
            {
                if(message.hasInstance())
                    output.writeString(1, message.getInstance(), false);
                if(message.hasChannelName())
                    output.writeString(2, message.getChannelName(), false);
                if(message.hasQueueName())
                    output.writeString(3, message.getQueueName(), false);
                if(message.hasCmdId())
                    output.writeObject(4, message.getCmdId(), org.yamcs.protobuf.SchemaCommanding.CommandId.WRITE, false);

                if(message.hasSource())
                    output.writeString(5, message.getSource(), false);
                if(message.hasBinary())
                    output.writeByteArray(6, message.getBinary().toByteArray(), false);

                if(message.hasUsername())
                    output.writeString(7, message.getUsername(), false);
                if(message.hasGenerationTime())
                    output.writeInt64(8, message.getGenerationTime(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandQueueEntry message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueEntry.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueEntry.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandQueueEntry> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueEntry.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueEntry.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueEntry.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandQueueEntry message) throws java.io.IOException {}
            public org.yamcs.protobuf.Commanding.CommandQueueEntry newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandQueueEntry.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandQueueEntry.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setInstance(input.readString());
                            break;
                        case 2:
                            builder.setChannelName(input.readString());
                            break;
                        case 3:
                            builder.setQueueName(input.readString());
                            break;
                        case 4:
                            builder.setCmdId(input.mergeObject(org.yamcs.protobuf.Commanding.CommandId.newBuilder(), org.yamcs.protobuf.SchemaCommanding.CommandId.MERGE));

                            break;
                        case 5:
                            builder.setSource(input.readString());
                            break;
                        case 6:
                            builder.setBinary(com.google.protobuf.ByteString.copyFrom(input.readByteArray()));
                            break;
                        case 7:
                            builder.setUsername(input.readString());
                            break;
                        case 8:
                            builder.setGenerationTime(input.readInt64());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandQueueEntry.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Commanding.CommandQueueEntry.Builder newMessage()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueEntry.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueEntry.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueEntry.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandQueueEntry.Builder> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueEntry.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueEntry.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueEntry.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandQueueEntry.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "instance";
                case 2: return "channelName";
                case 3: return "queueName";
                case 4: return "cmdId";
                case 5: return "source";
                case 6: return "binary";
                case 7: return "username";
                case 8: return "generationTime";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("instance", 1);
            fieldMap.put("channelName", 2);
            fieldMap.put("queueName", 3);
            fieldMap.put("cmdId", 4);
            fieldMap.put("source", 5);
            fieldMap.put("binary", 6);
            fieldMap.put("username", 7);
            fieldMap.put("generationTime", 8);
        }
    }

    public static final class CommandQueueRequest
    {
        public static final org.yamcs.protobuf.SchemaCommanding.CommandQueueRequest.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaCommanding.CommandQueueRequest.MessageSchema();
        public static final org.yamcs.protobuf.SchemaCommanding.CommandQueueRequest.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaCommanding.CommandQueueRequest.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandQueueRequest>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandQueueRequest message) throws java.io.IOException
            {
                if(message.hasQueueInfo())
                    output.writeObject(1, message.getQueueInfo(), org.yamcs.protobuf.SchemaCommanding.CommandQueueInfo.WRITE, false);

                if(message.hasQueueEntry())
                    output.writeObject(2, message.getQueueEntry(), org.yamcs.protobuf.SchemaCommanding.CommandQueueEntry.WRITE, false);

                if(message.hasRebuild())
                    output.writeBool(3, message.getRebuild(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandQueueRequest message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueRequest.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueRequest.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandQueueRequest> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueRequest.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueRequest.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueRequest.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandQueueRequest message) throws java.io.IOException {}
            public org.yamcs.protobuf.Commanding.CommandQueueRequest newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandQueueRequest.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandQueueRequest.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setQueueInfo(input.mergeObject(org.yamcs.protobuf.Commanding.CommandQueueInfo.newBuilder(), org.yamcs.protobuf.SchemaCommanding.CommandQueueInfo.MERGE));

                            break;
                        case 2:
                            builder.setQueueEntry(input.mergeObject(org.yamcs.protobuf.Commanding.CommandQueueEntry.newBuilder(), org.yamcs.protobuf.SchemaCommanding.CommandQueueEntry.MERGE));

                            break;
                        case 3:
                            builder.setRebuild(input.readBool());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandQueueRequest.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Commanding.CommandQueueRequest.Builder newMessage()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueRequest.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueRequest.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandQueueRequest.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandQueueRequest.Builder> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueRequest.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueRequest.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandQueueRequest.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandQueueRequest.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "queueInfo";
                case 2: return "queueEntry";
                case 3: return "rebuild";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("queueInfo", 1);
            fieldMap.put("queueEntry", 2);
            fieldMap.put("rebuild", 3);
        }
    }

    public static final class CommandHistoryAttribute
    {
        public static final org.yamcs.protobuf.SchemaCommanding.CommandHistoryAttribute.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaCommanding.CommandHistoryAttribute.MessageSchema();
        public static final org.yamcs.protobuf.SchemaCommanding.CommandHistoryAttribute.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaCommanding.CommandHistoryAttribute.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandHistoryAttribute>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandHistoryAttribute message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                if(message.hasValue())
                    output.writeObject(2, message.getValue(), org.yamcs.protobuf.SchemaYamcs.Value.WRITE, false);

            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandHistoryAttribute message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandHistoryAttribute.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandHistoryAttribute.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandHistoryAttribute> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryAttribute.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryAttribute.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryAttribute.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandHistoryAttribute message) throws java.io.IOException {}
            public org.yamcs.protobuf.Commanding.CommandHistoryAttribute newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandHistoryAttribute.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandHistoryAttribute.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.setValue(input.mergeObject(org.yamcs.protobuf.Yamcs.Value.newBuilder(), org.yamcs.protobuf.SchemaYamcs.Value.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandHistoryAttribute.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Commanding.CommandHistoryAttribute.Builder newMessage()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryAttribute.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandHistoryAttribute.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandHistoryAttribute.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandHistoryAttribute.Builder> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryAttribute.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryAttribute.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryAttribute.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandHistoryAttribute.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "value";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("value", 2);
        }
    }

    public static final class CommandHistoryEntry
    {
        public static final org.yamcs.protobuf.SchemaCommanding.CommandHistoryEntry.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaCommanding.CommandHistoryEntry.MessageSchema();
        public static final org.yamcs.protobuf.SchemaCommanding.CommandHistoryEntry.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaCommanding.CommandHistoryEntry.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandHistoryEntry>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandHistoryEntry message) throws java.io.IOException
            {
                if(message.hasCommandId())
                    output.writeObject(1, message.getCommandId(), org.yamcs.protobuf.SchemaCommanding.CommandId.WRITE, false);

                for(org.yamcs.protobuf.Commanding.CommandHistoryAttribute attr : message.getAttrList())
                    output.writeObject(3, attr, org.yamcs.protobuf.SchemaCommanding.CommandHistoryAttribute.WRITE, true);

            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandHistoryEntry message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandHistoryEntry.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandHistoryEntry.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandHistoryEntry> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryEntry.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryEntry.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryEntry.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandHistoryEntry message) throws java.io.IOException {}
            public org.yamcs.protobuf.Commanding.CommandHistoryEntry newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Commanding.CommandHistoryEntry.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Commanding.CommandHistoryEntry.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setCommandId(input.mergeObject(org.yamcs.protobuf.Commanding.CommandId.newBuilder(), org.yamcs.protobuf.SchemaCommanding.CommandId.MERGE));

                            break;
                        case 3:
                            builder.addAttr(input.mergeObject(org.yamcs.protobuf.Commanding.CommandHistoryAttribute.newBuilder(), org.yamcs.protobuf.SchemaCommanding.CommandHistoryAttribute.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Commanding.CommandHistoryEntry.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Commanding.CommandHistoryEntry.Builder newMessage()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryEntry.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandHistoryEntry.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaCommanding.CommandHistoryEntry.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Commanding.CommandHistoryEntry.Builder> typeClass()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryEntry.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryEntry.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Commanding.CommandHistoryEntry.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Commanding.CommandHistoryEntry.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "commandId";
                case 3: return "attr";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("commandId", 1);
            fieldMap.put("attr", 3);
        }
    }

}
