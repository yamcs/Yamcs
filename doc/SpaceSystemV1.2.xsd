<?xml version="1.0" encoding="UTF-8"?>
<!-- 

Style Notes, used throughout the schema:

	- Element and Type names begin with a capital letter.
	- Type names end with the word "Type".
	- Attribute names begin with a lowercase letter.
	- Usually, when the UML class diagram references classes, W3C Elements are used, and whenever
	  the UML references simple types (strings, ints), W3C Attributes are used.  In general, 
	  attributes are preferred over elements because they're easier to deal with 
	  in SAX and DOM, but whenever the Element/Attribute may one day carry metadata,
	  elements should be used.  One exception, is enumerated classes, because enumerations 
	  may be defined for attributes but not for elements.
	- Bias toward self-describing names over short, bandwidth conserving ones.
	- Use mixed case in names rather than underscores to combine multiple words (camelCase).
	- A documentation annotation is included in every element and type definition.  Annotations for a type are 
        included with the type definition, use of the type is annotated in the element definition.
	- Hints on units (for values with units) are provided in the names of attributes and 
	  elements (e.g. "dataRateInBPS" is preferred over "dataRate" OR "frameLengthInBits" is 
	  preferred over "frameLength").
	- Major elements or any elements used multiple times are first defined with a complexType definition
	- All collections are put inside either a "List" element or a "Set" Element depending on whether the collection
	  is ordered or unordered.
	- Simplicity in the XML files is favored over simplicity in the Schema
	- Whenever an additional validity check must be performed that is not describable in the schema language, 
	  an appinfo annotation describes that validity check.
-->
<schema xmlns:xtce="http://www.omg.org/space/xtce" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xml="http://www.w3.org/XML/1998/namespace" targetNamespace="http://www.omg.org/space/xtce" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.2">
	<annotation>
		<documentation xml:lang="en">OMG Document Number: dtc/2010-xx-xx</documentation>
		<documentation>$Id$</documentation>
		<documentation xml:lang="en">This is the master schema for the OMG Space Domain Task Force XML Telemetric and Command data Exchange (XTCE) format.</documentation>
	</annotation>
	<!--******** SpaceSystem -->
	<element name="SpaceSystem" type="xtce:SpaceSystemType" nillable="true">
		<annotation>
			<documentation xml:lang="en">A SpaceSystem describes a space system, principally aspects of its telemetry and commands. It may have more than one child SpaceSystem, forming a tree of SpaceSystems.</documentation>
		</annotation>
		<key name="parameterNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique parameter name at the space system level. Unfortunately it cannot also check that any ParameterRefs are unique as well.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:ParameterSet/xtce:Parameter | xtce:CommandMetaData/xtce:ParameterSet/xtce:Parameter"/>
			<field xpath="@name"/>
		</key>
		<key name="parameterTypeNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique parameter type name at the space system level.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:ParameterTypeSet/* | xtce:CommandMetaData/xtce:ParameterTypeSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="argumentTypeNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique argument type name at the space system level.</documentation>
			</annotation>
			<selector xpath="xtce:CommandMetaData/xtce:ArgumentTypeSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="metaCommandNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique MetaCommand name at the space system level. Unfortunately it cannot also check that any MetaCommandRefs are unique as well.</documentation>
			</annotation>
			<selector xpath="xtce:CommandMetaData/xtce:MetaCommandSet/xtce:MetaCommand"/>
			<field xpath="@name"/>
		</key>
		<key name="metaCommandCommandContainerNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique MetaCommand/CommandContainer name at the space system level.</documentation>
			</annotation>
			<selector xpath="xtce:CommandMetaData/xtce:MetaCommandSet/xtce:MetaCommand/xtce:CommandContainer"/>
			<field xpath="@name"/>
		</key>
		<key name="algorithmNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique algorithm name at the space system level.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:AlgorithmSet/* | xtce:CommandMetaData/xtce:AlgorithmSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="streamNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique stream name at the space system level.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:StreamSet/* | xtce:CommandMetaData/xtce:StreamSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="serviceNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique service name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:ServiceSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="containerNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a container stream name at the space system level.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:ContainerSet/* | xtce:CommandMetaData/xtce:CommandContainerSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="messageNameKey">
			<selector xpath="xtce:TelemetryMetaData/xtce:MessageSet/*"/>
			<field xpath="@name"/>
		</key>
	</element>
	<complexType name="SpaceSystemType" mixed="false">
		<annotation>
			<documentation xml:lang="en">SpaceSystem is a collection of SpaceSystem(s) including space assets, ground assets, multi-satellite systems and sub-systems.  A SpaceSystem is the root element for the set of data necessary to monitor and command an space device, this may include the binary decomposition the data streams going into and out of a device.</documentation>
		</annotation>
		<complexContent mixed="false">
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="Header" type="xtce:HeaderType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Document properties such authorship, notes, and change history. Many of these attributes and elements are user defined.</documentation>
						</annotation>
					</element>
					<element name="TelemetryMetaData" type="xtce:TelemetryMetaDataType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Description area for telemetry data types and packaging such as packets or minor frames.</documentation>
						</annotation>
					</element>
					<element name="CommandMetaData" type="xtce:CommandMetaDataType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Description area for command data types, argument types, command packaging and commands.</documentation>
						</annotation>
					</element>
					<element name="ServiceSet" type="xtce:ServiceSetType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">A service is a logical grouping of container and/or messages.</documentation>
						</annotation>
					</element>
					<element ref="xtce:SpaceSystem" minOccurs="0" maxOccurs="unbounded">
						<annotation>
							<documentation xml:lang="en">Child SpaceSystems of SpaceSystem, forming a tree of SpaceSystem.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="operationalStatus" type="token" use="optional">
					<annotation>
						<documentation xml:lang="en">A user defined operational status of a particular instance document.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="CommandMetaDataType" mixed="false">
		<annotation>
			<documentation xml:lang="en">CommandMetaData contains information about commands.</documentation>
		</annotation>
		<sequence>
			<element name="ParameterTypeSet" type="xtce:ParameterTypeSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A set of ParameterTypes referred to by parameters. Several common data types are represented: string, binary, enumeration, float, integer, boolean, absolute time, relative time, array and aggregate. For telemery the parameter type represents the destination data type, and its data encoding represents the source data type. For commanding, the parameter type represents the source data type and its data encoding represents the destination data type. Calibrators and alarms (limits) are described here as well as other properties.</documentation>
				</annotation>
			</element>
			<element name="ParameterSet" type="xtce:ParameterSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A list of parameters for this SpaceSystem: parameters have a ParameterType, they may be shared by one or more Parameters. There are four forms of Parameters: telemetry parameters, command parameters, session or system parameters, and derived parameters.</documentation>
				</annotation>
			</element>
			<element name="ArgumentTypeSet" type="xtce:ArgumentTypeSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A set of ArgumentTypes referred to by Arguments, similar in construction to ParameterType; they have no alarms.</documentation>
				</annotation>
			</element>
			<element name="MetaCommandSet" type="xtce:MetaCommandSetType">
				<annotation>
					<documentation xml:lang="en">A set of command definitions: a command is an abstraction, it defines both the packaging of the command and some aspects related to behavior (such as command validation).</documentation>
				</annotation>
			</element>
			<element name="CommandContainerSet" type="xtce:CommandContainerSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Contains a set of containers used on the command side, probably in MetaCommand/CommandContainer.  Similar in construction to ContainerSet, inheritance and other mechanisms may be used but command packaging is fully described in MetaCommand/CommandContainer.</documentation>
				</annotation>
			</element>
			<element name="StreamSet" type="xtce:StreamSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Describe aspects of a telemetry stream here, or a sub-stream in a series of packets or minor frames.  </documentation>
				</annotation>
			</element>
			<element name="AlgorithmSet" type="xtce:AlgorithmSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A set of algorithms used in these telemetry restrictions. </documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="TelemetryMetaDataType" mixed="false">
		<annotation>
			<documentation xml:lang="en">All the descriptive information about telemetry is contained in TelemetryMetaData.</documentation>
		</annotation>
		<sequence>
			<element name="ParameterTypeSet" type="xtce:ParameterTypeSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A set of ParameterTypes referred to by parameters. Several common data types are represented: string, binary, enumeration, float, integer, boolean, absolute time, relative time, array and aggregate. For telemetry the parameter type represents the destination data type, and its data encoding represents the source data type. For commanding, the parameter type represents the source data type and its data encoding represents the destination data type. Calibrators and alarms (limits) are described here as well as other properties.</documentation>
				</annotation>
			</element>
			<element name="ParameterSet" type="xtce:ParameterSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A list of parameters for this SpaceSystem: parameters have a ParameterType, they may be shared by one or more Parameters. There are four forms of Parameters: telemetry parameters, command parameters, session or system parameters, and derived parameters.</documentation>
				</annotation>
			</element>
			<element name="ContainerSet" type="xtce:ContainerSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Holds the list of all potential container definitions for telemetry packages (e.g. packets, minor frames or others formats). Containers may be composed in a variety of ways to form full packaging descriptions for a format, principally through inheritance but also using association.</documentation>
				</annotation>
			</element>
			<element name="MessageSet" type="xtce:MessageSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">MessageSet is deprecated. Messages are an alternative to container inheritance; they ignore any container inheritance constructs.</documentation>
				</annotation>
			</element>
			<element name="StreamSet" type="xtce:StreamSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Describe aspects of a telemetry stream here, or a sub-stream in a series of packets or minor frames.  </documentation>
				</annotation>
			</element>
			<element name="AlgorithmSet" type="xtce:AlgorithmSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A set of algorithms used in these telemetry restrictions. </documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ServiceRefType">
		<annotation>
			<documentation xml:lang="en">A reference to a Service</documentation>
		</annotation>
		<simpleContent>
			<extension base="xtce:NameReferenceType">
				<attribute name="serviceRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to a Service.</documentation>
					</annotation>
				</attribute>
			</extension>
		</simpleContent>
	</complexType>
	<complexType name="AlgorithmSetType" mixed="false">
		<annotation>
			<documentation xml:lang="en">An unordered collection of algorithms</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="CustomAlgorithm" type="xtce:InputOutputTriggerAlgorithmType">
				<annotation>
					<documentation xml:lang="en">The most general custom algorithm form: input, output and trigger algorithm.</documentation>
				</annotation>
			</element>
			<element name="MathAlgorithm" type="xtce:MathAlgorithmType">
				<annotation>
					<documentation xml:lang="en">The a math algorithm is based on the math operations type.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<!--******** End of Top Level SpaceSystem Schema -->
	<!--************************************************-->
	<!--******** Packaging Schema -->
	<annotation>
		<documentation xml:lang="en">This schema defines the dictionary for containers, which in turn describe the physical composition of data in a communication system</documentation>
	</annotation>
	<complexType name="ContainerType" abstract="true" mixed="false">
		<annotation>
			<documentation xml:lang="en">An abstract block of data; used as the base type for more specific container types</documentation>
		</annotation>
		<complexContent mixed="false">
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<annotation>
						<documentation xml:lang="en">RateInStream is used to:  a) generate alarms when the Container is updated too frequently or too infrequently, b) provide some 'guidelines' for generating forward link containers, c) provide some guidelines for spacecraft simulators to generate telemetry containers.  If necessary, these rates may be defined on a per stream basis.</documentation>
						<appinfo>Processing software should check that any stream referenced in the RateInStreamSet actually exist.</appinfo>
					</annotation>
					<element name="DefaultRateInStream" type="xtce:RateInStreamType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">If RateInStreamSet is not specified, this applies.</documentation>
						</annotation>
					</element>
					<element name="RateInStreamSet" type="xtce:RateInStreamSetType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">A set of RateInStream.</documentation>
						</annotation>
					</element>
					<element name="BinaryEncoding" type="xtce:BinaryDataEncodingType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Only the child element SizeInBits is valid for containers, ignore the other elements.  Use it to specify the size of the container explicitly.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="SequenceContainerType">
		<annotation>
			<documentation xml:lang="en">A list of raw parameters, parameter segments, stream segments, containers, or container segments.  Sequence containers may inherit from other sequence containers; when they do, the sequence in the parent SequenceContainer is 'inherited' and if the location of entries in the child sequence is not specified, it is assumed to start where the parent sequence ended.  Parent sequence containers may be marked as "abstract".  Some implementations may designate that the idle pattern is part of any unallocated space in the Container.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ContainerType">
				<sequence>
					<element name="EntryList" type="xtce:EntryListType">
						<annotation>
							<documentation xml:lang="en">Construct the body of this container, each referred to item appears one after the other in stream accept as adjusted by LocationInContainer offsetting.  By default the size of the this construction is calculated from the entry sizes.  If this size is specified explicitly (see BinaryEncoding here), then the calculated size and specified size should match. Each entry size is taken from each entry's item.</documentation>
						</annotation>
					</element>
					<element name="BaseContainer" type="xtce:BaseContainerType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Extend another container in an object oriented fashion. The container this container extends is part of a parent-inheritance-chain, it may be another SequenceContainer or a CommandContainerSet/CommandContainer. If this container is extended further they are part of this container's child-inheritance-chain. One main feature of container inheritance is that parent's EntryList is placed on the front the child's EntryList, eventually forming a single EntryList.  Another main feature is the use constraints or restriction to provide identifying information. Other elements such AliasSet, DefaultRateInStream, RateInStreamSet and BinaryEncoding/SizeInBits are part of inheritance, see appinfo for a full description.</documentation>
							<appinfo>This documents the inheritance mechanism of BaseContainer for SequenceContainer. Basic rules: -- A container may extend another using the BaseContainer element --- The parent’s EntryList is copied to the beginning of the child’s EntryList --- If multiple levels of inheritance exist – all RestrictionCriteria must evaluate to true --- BaseContainers that form loops are illegal --- Abstract containers do not create concrete instances or new entities themselves. Specific rules by element and attribute: @name   Not inherited by child --- @abstract  Not inherited by child --- @idlePattern  Not inherited by child --- @shortDescription  Not inherited by child --- LongDescription  Not inherited by child --- AliasSet  Not inherited by child --- AncillaryDataSet  Child’s content prefixed to parent’s content if present --- DefaultRateInStream  Child’s content will override parent’s content if present, otherwise child gets parent’s content if it is specified --- RateInStreamSet  Child’s content prefixed to parent’s content if present, if RateInStream/@streamRef matches, the child’s RateInStream will override --- BinaryEncoding/SizeInContainer  Child’s content will override parent’s content if present, otherwise child gets parent’s content if specified --- EntryList  Parent’s content prefixed to child’s if present --- BaseContainer/RestrictionCriteria  Restrictions are scoped to their constructions. This means that a child’s restrictions apply to both its EntryList and any entries inherited itself (and so on).</appinfo>
						</annotation>
					</element>
				</sequence>
				<attribute name="abstract" type="boolean" default="false">
					<annotation>
						<documentation xml:lang="en">Set to abstract or not-abstract.  The default is not-abstract.   An abstract container cannot be an instance of a real item in packaging, such as a packet or minor frame.  This flag has meaning in inheritance relationships.</documentation>
					</annotation>
				</attribute>
				<attribute name="idlePattern" type="xtce:FixedIntegerValueType" default="0x0">
					<annotation>
						<documentation xml:lang="en">An optional idle pattern for the container, defaults to zero.  This flag may have no meaning for some formats.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="SequenceEntryType">
		<annotation>
			<documentation xml:lang="en">An type used by sequence containers.  An entry contains a location in the container.  The location may be either fixed or dynamic, absolute (to the start or end of the enclosing container, or relative (to either the previous or next entry).  Entries may also repeat or be conditionally included.</documentation>
		</annotation>
		<sequence>
			<element name="LocationInContainerInBits" type="xtce:LocationInContainerInBitsType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">If no LocationInContainer value is given, the entry is assumed to begin immediately after the previous entry. For previousEntry, this entry begins at the end of the last entry.  For containerStart, this entry is offset from the beginning of this entire container construction (absolute addressing).  For containerEnd, the offset is from the end (it may be hard to determine this, explicitly setting the size of the container may help). For nextEntry, the end of this entry offset from the beginning of the next entry (again, this may be more useful is the next entry has some fixed address). Various offsets can be given using FixedValue, DynamicValue and DiscreteLookupList.  It is far easier to have all entries appear back-to-back without spaces, specified using the default of previousEntry which would then not need to be given.</documentation>
				</annotation>
			</element>
			<element name="RepeatEntry" type="xtce:RepeatType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">May be used when this entry repeats itself in the sequence container.  If not supplied, the entry does not repeat.  A repeat entry is different than array in concept as the same address is sampled repeatedly, whereas an array represents different memory cells. A repeat of one means this entry appears two times.  A repeat of zero then means this entry appears one time overall and is the same as if the RepeatEntry did not appear in the construction. A repeat of two produces three entries, and so on forth. A negative repeat count is illegal but not restricted in the construction -- it should be checked for.</documentation>
				</annotation>
			</element>
			<element name="IncludeCondition" type="xtce:MatchCriteriaType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">This entry will only be included in the sequence when this condition is true.  If no IncludeCondition is given, then it will not be included.  A parameter that is not included will be treated as if it did not exist in the sequence at all.  This mechanism does not produce identifying information like that in RestrictionCriteria.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ContainerRefType">
		<annotation>
			<documentation xml:lang="en">Holds a reference to a container.</documentation>
		</annotation>
		<attribute name="containerRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">name of container.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="MessageRefType">
		<annotation>
			<documentation xml:lang="en">Holds a reference to a message.</documentation>
		</annotation>
		<attribute name="messageRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">name of message.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ServiceType">
		<annotation>
			<documentation xml:lang="en">Holds a set of services, logical groups of containers or messages (but not both).</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<choice>
					<element name="MessageRefSet" type="xtce:MessageRefSetType">
						<annotation>
							<documentation xml:lang="en">The set of Messages that are part of this Service.</documentation>
						</annotation>
					</element>
					<element name="ContainerRefSet" type="xtce:ContainerRefSetType">
						<annotation>
							<documentation xml:lang="en">The set of Containers that are part of this Service.  If the container is an abstract container, it and its child containers become part of the Service.  If the container is not abstract, it and any of its parent containers become members.</documentation>
						</annotation>
					</element>
				</choice>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ContainerSetType">
		<annotation>
			<documentation xml:lang="en">Unordered Set of Containers</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="SequenceContainer" type="xtce:SequenceContainerType">
				<annotation>
					<documentation xml:lang="en">SequenceContainers define sequences of parameters or other containers.  </documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="EntryListType" mixed="false">
		<annotation>
			<documentation xml:lang="en">Contains an ordered list of Entries, used in SequenceContainer.</documentation>
		</annotation>
		<choice minOccurs="0" maxOccurs="unbounded">
			<element name="ParameterRefEntry" type="xtce:ParameterRefEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to a Parameter.  Look up its ParameterType up to find the bit-width.</documentation>
				</annotation>
			</element>
			<element name="ParameterSegmentRefEntry" type="xtce:ParameterSegmentRefEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to a Parameter that is segmented in this container.</documentation>
				</annotation>
			</element>
			<element name="ContainerRefEntry" type="xtce:ContainerRefEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to another Container that is included here.  This is a "has-a" relationship except for a special case, and is not part of the identifying aspects of BaseContainer. The entire construction should be treated as a block in terms of  LocationInContainer addressing. A special case exists for this Entry form if the container being referred to is abstract.  If it is and it has any derived containers (any child containers of it) that are not abstract -- then these instances may be placed here depending on the values in their RestrictionCriteria.  See appinfo. </documentation>
					<appinfo>Implementing this requires capturing inheritance relationships of the various containers.  It is likely that the initial refered to container from the entry is both abstract and has an empty EntryList. All the content supplied the deriving child containers.  Those containers should also specify restrictions such that only one matches and in that way only one of their EntryLists will go here.  Any matching derived child contianer in this manner is also treated as an entire block for purposes of container addressing in this container. Multiple matches by the child form a union and all are inserted.</appinfo>
				</annotation>
			</element>
			<element name="ContainerSegmentRefEntry" type="xtce:ContainerSegmentRefEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to a Container that is segmented in this container.</documentation>
				</annotation>
			</element>
			<element name="StreamSegmentEntry" type="xtce:StreamSegmentEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to a stream that is segmented. </documentation>
				</annotation>
			</element>
			<element name="IndirectParameterRefEntry" type="xtce:IndirectParameterRefEntryType">
				<annotation>
					<documentation xml:lang="en">The parameter included here is named in the ParameterInstance.  The NameReference of that Parameter is interpreted relative to this SpaceSystem.</documentation>
				</annotation>
			</element>
			<element name="ArrayParameterRefEntry" type="xtce:ArrayParameterRefEntryType">
				<annotation>
					<documentation xml:lang="en">The named ArrayParameter (a Parameter that has an ArrayParameterType) is included here.  The dimension sizes are defined here for it.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="ParameterRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is a single Parameter</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="parameterRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to Parameter.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ParameterSegmentRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is only a portion of a parameter value indicating that the entire parameter value must be assembled from other parameter segments.   It is assumed that parameter segments happen sequentially in time, that is the first part if a telemetry parameter first, however (and there's always a however), if this is not the case the order of this parameter segment may be supplied with the order attribute where the first segment order="0".</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="parameterRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to Parameter.</documentation>
					</annotation>
				</attribute>
				<attribute name="order" type="positiveInteger">
					<annotation>
						<documentation xml:lang="en">Use order to designate an index for the segment.</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="positiveInteger" use="required">
					<annotation>
						<documentation xml:lang="en">The size in bits of the segment.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ContainerRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is simply a reference to another container.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="containerRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to a SequenceContainer or CommandContainerSet/CommandContainer.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ContainerSegmentRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is only a portion of a container indicating that the entire container must be assembled from other container segments.   It is assumed that container segments happen sequentially in time, that is the first part of a container is first, however (and there's always a however), if this is not the case the order of this container segment may be supplied with the order attribute where the first segment order="0".  Each instance of a container cannot overlap in the overall sequence with another instance</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="containerRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to a SequenceContainer or CommandContainerSet/CommandContainer.</documentation>
					</annotation>
				</attribute>
				<attribute name="order" type="positiveInteger">
					<annotation>
						<documentation xml:lang="en">Use order to designate an index for the segment.</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="positiveInteger" use="required">
					<annotation>
						<documentation xml:lang="en">The size in bits of the segment.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StreamSegmentEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is a portion of a stream (streams are by definition, assumed continuous)   It is assumed that stream segments happen sequentially in time, that is the first part if a steam first, however, if this is not the case the order of the stream segments may be supplied with the order attribute where the first segment order="0".</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="streamRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to a Stream.</documentation>
					</annotation>
				</attribute>
				<attribute name="order" type="positiveInteger">
					<annotation>
						<documentation xml:lang="en">Use order to designate an index for the segment.</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="positiveInteger" use="required">
					<annotation>
						<documentation xml:lang="en">The size in bits of the segment.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="IndirectParameterRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry whose name is given by the value of a ParamameterInstance.  This entry may be used to implement dwell telemetry streams.  The value of the parameter in ParameterInstance must use either the name of the Parameter or its alias.  If it's an alias name, the alias namespace is supplied as an attribute.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<sequence>
					<element name="ParameterInstance" type="xtce:ParameterInstanceRefType">
						<annotation>
							<documentation xml:lang="en">Look the parameter NameReference up in this ParameterInstance.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="aliasNameSpace" type="string">
					<annotation>
						<documentation xml:lang="en">If the parameter instance is an alias, then supply this to fully match the reference.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ArrayParameterRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is an array parameter.  This entry is somewhat special because the entry may represent only a part of the Array and it's important to describe which dimensions of the array come first in the sequence as well as the size of the array.  Holds a NameReference to the array parameter and dimensionList which gives the dimension sizes, and the optional attribute lastEntryForThisArrayInstance.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<sequence>
					<element name="DimensionList" type="xtce:DimensionListType">
						<annotation>
							<documentation xml:lang="en">Where the Dimension list is in this form:  Array[1stDim][2ndDim][lastDim].  The last dimension is assumed to be the least significant - that is this dimension will cycle through its combination before the next to last dimension changes. This is row major order. The order MUST ascend or the array will need to be broken out entry by entry. </documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="parameterRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to a Parameter that has an ArrayParameterType.</documentation>
					</annotation>
				</attribute>
				<attribute name="lastEntryForThisArrayInstance" type="boolean" default="false">
					<annotation>
						<documentation xml:lang="en">Mark this entry as the last entry in the array.  This can be used when an array is split across several containers and this container holds the last part.  For example suppose a 1-D array is of size 3.   If the first container has the first index, and the second container has the second index and the third contianer has the third, then the third container should set this flag to true.   In that way, the entire array spread across the three containers an be interpreted as being of size 3 and it can be re-assembled as such.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RateInStreamType">
		<annotation>
			<documentation xml:lang="en">Used in packaging to define the expected rate that any individual container will be in a Stream</documentation>
		</annotation>
		<attribute name="basis" type="xtce:BasisType" default="perSecond">
			<annotation>
				<documentation xml:lang="en">Rate is specified per second or per container update.</documentation>
			</annotation>
		</attribute>
		<attribute name="minimumValue" type="double">
			<annotation>
				<documentation xml:lang="en">Minimum accepted update rate.</documentation>
			</annotation>
		</attribute>
		<attribute name="maximumValue" type="double">
			<annotation>
				<documentation xml:lang="en">Maximum accepted update rate.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<!--******** End of Packaging Schema -->
	<!--************************************************-->
	<!--******** Telemetry Schema -->
	<complexType name="ParameterPropertiesType" mixed="false">
		<annotation>
			<documentation xml:lang="en">Holds certain properties related to parameters.</documentation>
		</annotation>
		<sequence>
			<element name="SystemName" type="string" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Intended to be used when the database is built in a flat, non-hierarchical format; a single SpaceSystem.</documentation>
				</annotation>
			</element>
			<element name="ValidityCondition" type="xtce:MatchCriteriaType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Optional condition that must be true for this Parameter to be valid</documentation>
				</annotation>
			</element>
			<element name="PhysicalAddressSet" type="xtce:PhysicalAddressSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">One or more physical addresses may be associated with each Parameter.  Examples of physical addresses include a location on the spacecraft or a location on a data collection bus. </documentation>
				</annotation>
			</element>
			<element name="TimeAssociation" type="xtce:TimeAssociationType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">This time will override any Default value for TimeAssociation. </documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="dataSource" type="xtce:DataSourceType" use="optional">
			<annotation>
				<documentation xml:lang="en">A telemetered Parameter is one that will have values in telemetry.  A derived Parameter is one that is calculated, usually be an Algorithm.  A constant Parameter is  one that is used as a constant in the system (e.g. a vehicle id).  A local Parameter is one that is used purely on the ground (e.g. a ground command counter).</documentation>
			</annotation>
		</attribute>
		<attribute name="readOnly" type="boolean" use="optional" default="false">
			<annotation>
				<documentation xml:lang="en">A Parameter marked as 'readOnly' true is constant and non-settable</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="TimeAssociationType">
		<annotation>
			<documentation xml:lang="en">Telemetry parameter instances are often times "time-tagged" with a timing signal either provided on the ground or on the space system.  This data element allows one to specify which of possibly many AbsoluteTimeParameters to use to "time-tag" parameter instances with.  </documentation>
			<appinfo>The parameter NameReference must be to an AbsoluteTime Parameter.</appinfo>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterInstanceRefType">
				<attribute name="interpolateTime" type="boolean" default="true">
					<annotation>
						<documentation xml:lang="en">If true, then the current value of the AbsoluteTime will be projected to current time.  In other words, if the value of the AbsoluteTime parameter was set 10 seconds ago, then 10 seconds will be added to its value before associating this time with the parameter.</documentation>
					</annotation>
				</attribute>
				<attribute name="offset" type="duration">
					<annotation>
						<documentation xml:lang="en">The offset is used to supply a relative time offset from the time association and to this parameter</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ParameterInstanceRefType">
		<annotation>
			<documentation xml:lang="en">A reference to an instance of a Parameter.   Used when the value of a parameter is required for a calculation or as an index value.  A positive value for instance is forward in time, a negative value for count is backward in time, a 0 value for count means use the current value of the parameter or the first value in a container.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterRefType">
				<attribute name="instance" type="integer" default="0">
					<annotation>
						<documentation xml:lang="en">0 the default is the most recent value, negative values are in the past, positive in the future.</documentation>
					</annotation>
				</attribute>
				<attribute name="useCalibratedValue" type="boolean" default="true">
					<annotation>
						<documentation xml:lang="en">For telemetry, interpret the parameter value using the data type of the DataEncoding if this flag is false or if there is no calibrator, otherwise interpret the value using the data type of the ParameterType. </documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ParameterRefType">
		<annotation>
			<documentation xml:lang="en">A reference to a Parameter. Uses Unix ‘like’ naming across the SpaceSystem Tree (e.g., SimpleSat/Bus/EPDS/BatteryOne/Voltage).  To reference an individual member of an array use the zero based bracket notation commonly used in languages like C, C++, and Java.</documentation>
		</annotation>
		<attribute name="parameterRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">NameReference to a parameter.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="PhysicalAddressType" mixed="false">
		<annotation>
			<documentation xml:lang="en">Describe physical addresses on the spaceSystem that this parameter may be collected from.</documentation>
		</annotation>
		<sequence>
			<element name="SubAddress" type="xtce:PhysicalAddressType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">The sub-address of the physical address.</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="sourceName" type="string">
			<annotation>
				<documentation xml:lang="en">The name of the source.</documentation>
			</annotation>
		</attribute>
		<attribute name="sourceAddress" type="string">
			<annotation>
				<documentation xml:lang="en">The address of the source.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ParameterTypeSetType">
		<annotation>
			<documentation xml:lang="en">Holds the list of parameter type definitions, one or more specific parameter types.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="StringParameterType" type="xtce:StringParameterType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of a string, probably using StringDataEncoding.  </documentation>
				</annotation>
			</element>
			<element name="EnumeratedParameterType" type="xtce:EnumeratedParameterType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of an enumeration, probably using IntegerDataEncoding.  </documentation>
				</annotation>
			</element>
			<element name="IntegerParameterType" type="xtce:IntegerParameterType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of an integer, probably using IntegerDataEncoding.</documentation>
				</annotation>
			</element>
			<element name="BinaryParameterType" type="xtce:BinaryParameterType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of a data type-less value, or it may be used to describe the format of a data type that is not well represented by the the other ParameterTypes.   Usually paired with BinaryDataEncoding.</documentation>
				</annotation>
			</element>
			<element name="FloatParameterType" type="xtce:FloatParameterType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of an float, probably using IntegerDataEncoding with a calibrator or FloatDataEncoding.</documentation>
				</annotation>
			</element>
			<element name="BooleanParameterType" type="xtce:BooleanParameterType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of an boolean, probably using IntegerDataEncoding. A boolean is essentially a restricted form of enumerations. It is useful to define true false flags that the parsing system will properly interpret.</documentation>
				</annotation>
			</element>
			<element name="RelativeTimeParameterType" type="xtce:RelativeTimeParameterType">
				<annotation>
					<documentation xml:lang="en">Describe a relative time offset from an absolute time, may have alarms.</documentation>
				</annotation>
			</element>
			<element name="AbsoluteTimeParameterType" type="xtce:AbsoluteTimeParameterType">
				<annotation>
					<documentation xml:lang="en">Describe an absolute time from some epoch.</documentation>
				</annotation>
			</element>
			<element name="ArrayParameterType" type="xtce:ArrayParameterType">
				<annotation>
					<documentation xml:lang="en">Describe aspects of an array data type using another parameter type. Its number of dimensions is describe here but not the size of each dimension. That is done in the containers it is used in.  Array of array is not supported due to container entry issues.</documentation>
				</annotation>
			</element>
			<element name="AggregateParameterType" type="xtce:AggregateParameterType">
				<annotation>
					<documentation xml:lang="en">AggegateParameters are analogous to a C struct, they are an aggregation of other parameter types. An aggregrate of array is problematic because there is no way to set its dimension sizes in the EntryList.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<!--******** End of Telemetry Schema -->
	<!--************************************************-->
	<!--******** Command Schema -->
	<!--CommandDefinitionType -->
	<complexType name="ArgumentTypeSetType">
		<annotation>
			<documentation xml:lang="en">Holds the list of argument type definitions. </documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="StringArgumentType" type="xtce:StringArgumentType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of a string, probably using StringDataEncoding.  </documentation>
				</annotation>
			</element>
			<element name="EnumeratedArgumentType" type="xtce:EnumeratedDataType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of an enumeration, probably using IntegerDataEncoding.  </documentation>
				</annotation>
			</element>
			<element name="IntegerArgumentType" type="xtce:IntegerArgumentType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of an integer, probably using IntegerDataEncoding.</documentation>
				</annotation>
			</element>
			<element name="BinaryArgumentType" type="xtce:BinaryArgumentType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of a data type-less value, or it may be used to describe the format of an data type that is not well represents by the the other ParameterTypes.   Usually paired with BinaryDataEncoding.</documentation>
				</annotation>
			</element>
			<element name="FloatArgumentType" type="xtce:FloatArgumentType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of an float, probably using IntegerDataEncoding with a calibrator or FloatDataEncoding.</documentation>
				</annotation>
			</element>
			<element name="BooleanArgumentType" type="xtce:BooleanArgumentType">
				<annotation>
					<documentation xml:lang="en">Represent aspects of an boolean, probably using IntegerDataEncoding. A boolean is essentially a restricted form of enumerations. It is useful to define true false flags that the parsing system will properly interpret.</documentation>
				</annotation>
			</element>
			<element name="RelativeTimeArgumentType" type="xtce:RelativeTimeArgumentType">
				<annotation>
					<documentation xml:lang="en">Describe a relative time offset from an absolute time.</documentation>
				</annotation>
			</element>
			<element name="AbsoluteTimeArgumentType" type="xtce:AbsoluteTimeArgumentType">
				<annotation>
					<documentation xml:lang="en">Describe an absolute time from some epoch.</documentation>
				</annotation>
			</element>
			<element name="ArrayArgumentType" type="xtce:ArrayArgumentType">
				<annotation>
					<documentation xml:lang="en">Describe aspects of an array data type using another parameter type. Its number of dimensions is describe here but not the size of each dimension. That is done in the containers it is used in.  Array of array is not supported due to container entry issues.</documentation>
				</annotation>
			</element>
			<element name="AggregateArgumentType" type="xtce:AggregateArgumentType">
				<annotation>
					<documentation xml:lang="en">AggegateParameters are analogous to a C struct, they are an aggregation of other parameter types. An aggregrate of array is problematic because there is no way to set its dimension sizes in the EntryList.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="MetaCommandType" mixed="false">
		<annotation>
			<documentation xml:lang="en">A type definition used as the base type for a CommandDefinition</documentation>
		</annotation>
		<complexContent mixed="false">
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="BaseMetaCommand" type="xtce:BaseMetaCommandType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Extend another MetaCommand.  See appinfo for a complete description of how this affects each element and attribute of MetaCommand.</documentation>
							<appinfo>The rules for MetaCommand inheritance as follows:  A MetaCommand may extend another using the BaseMetaCommand element --- BaseMetaCommands that form loops are illegal --- Its CommandContainer is only inherited if the BaseContainer is explicitly set between the child and parent.  The same rules apply to MetaCommand/CommandContainer inheritance as described in SequenceContainer/BaseContainer.  Specific rules by element and attribute are:@name Not inherited by child --- @abstract Not inherited by child -- @shortDescription Not inherited by child --- LongDescription  Not inherited by child --- AliasSet  Not inherited by child --- AncillaryDataSet  Child’s content prefixed to parent’s content if present --- BaseMetaCommand  Not applicable --- BaseMetaCommand/ArgumentAssignment  Child’s content will override parent’s content if present, otherwise child gets parent’s content if it is specified.  If argument is the same name, it overrides the parent’s ArgumentAssignment. --- SystemName  Child’s content will override parent’s content if present, otherwise child gets parent’s content if specified --- ArgumentList Child’s content prefixed to parent’s content if present -- CommandContainer  Special Case:  inherited like other containers if CommandContainer/BaseContainer set.  Otherwise it is not inherited. --- TransmissionConstraintList  Child’s content prefixed to parent’s content if present -- DefaultSignificance  Child’s content will override parent’s content if present, otherwise child gets parent’s content if specified --- ContextSignificanceList  Child’s content prefixed to parent’s content if present --- Interlock  Child’s content will override parent’s content if present, otherwise child gets parent’s content if specified --- VerifierSet  Child’s content prefixed to parent’s content if present but: -  Same verifiers are overridden by the child -  CommandCompletes are accrued (child elements prefixed to parent’s). -  If the child’s CommandComplete has the same @name as parent’s, the child overrides it --- ParameterToSetList  Child’s content prefixed to parent’s content if present. If the @parameterRef is the same, the child overrides the parent’s --- ParameterToSuspendAlarmsOnSet  Child’s content prefixed to parent’s content if present. If the @parameterRef is the same, the child overrides the parent’s.</appinfo>
						</annotation>
					</element>
					<element name="SystemName" type="string" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Intended to be used when the database is built in a flat, non-hierarchical format, one SpaceSystem.</documentation>
						</annotation>
					</element>
					<element name="ArgumentList" type="xtce:ArgumentListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Many commands have one or more options.  These are called command arguments.  Command arguments may be of any of the standard data types.  MetaCommand arguments are local to the MetaCommand. Arguments are the visible to the user or processing software.  This can be somewhat subjective -- for example a checksum that is always part of the command format is probably not an argument. </documentation>
						</annotation>
					</element>
					<element name="CommandContainer" type="xtce:MetaCommandContainerType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Tells how to package this command.  May not be referred to in the EntryList of a SequenceContainer, CommandContainerSet/CommandContainer or another MetaCommandContainer.  May be extended by another MetaCommand/CommandContainer.</documentation>
						</annotation>
					</element>
					<element name="TransmissionConstraintList" type="xtce:TransmissionConstraintListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Appended to the TramsmissionConstraint List of the base command.  Constraints are checked in order.  In inheritance, all constraints are applicable including those in the parent-inheritance-chain.</documentation>
						</annotation>
					</element>
					<element name="DefaultSignificance" type="xtce:SignificanceType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Some Command and Control Systems may require special user access or confirmations before transmitting commands with certain levels.  The level is inherited from the Base MetaCommand, or it overrides any in the parent-chain if given here, however it should not go down in consequenceLevel.</documentation>
						</annotation>
					</element>
					<element name="ContextSignificanceList" type="xtce:ContextSignificanceListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Used when the significance (possible consequence) of a command varies by the operating context.  </documentation>
						</annotation>
					</element>
					<element name="Interlock" type="xtce:InterlockType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">An Interlock is a type of Constraint, but not on Command instances of this MetaCommand; Interlocks apply instead to the next command.  An Interlock will block successive commands until this command has reached a certain stage (through verifications).  Interlocks are scoped to a SpaceSystem basis. </documentation>
						</annotation>
					</element>
					<element name="VerifierSet" type="xtce:VerifierSetType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">A Command Verifier is a conditional check on the telemetry from a SpaceSystem that that provides positive indication on the processing state of a command.  There are eight different verifiers each associated with difference states in command processing: TransferredToRange, TransferredFromRange, Received, Accepted, Queued, Execution, Complete, and Failed.  There may be multiple ‘complete’ verifiers. ‘Complete’ verifiers are added to the Base MetaCommand ‘Complete’ verifier list.  All others will overide a verifier defined in a Base MetaCommand.  </documentation>
						</annotation>
					</element>
					<element name="ParameterToSetList" type="xtce:ParameterToSetListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Parameters that are set with a new value after the command has been sent, appended to the Base MetaCommand list.</documentation>
						</annotation>
					</element>
					<element name="ParametersToSuspendAlarmsOnSet" type="xtce:ParametersToSuspendAlarmsOnSetType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Sometimes it is necessary to suspend alarms - particularly 'change' alarms for commands that will change the value of a Parameter. </documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="abstract" type="boolean" default="false">
					<annotation>
						<documentation xml:lang="en">If true, an instance of this command cannot be created.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MetaCommandContainerEntryListType" mixed="false">
		<annotation>
			<documentation xml:lang="en">Similar to an EntryList type but also may include command arguments or -as a convenience - fixed value entries. Argument entries may only refer to arguments in the ArgumentList of the MetaCommand instance they are defined in or to arguments in  MetaCommands through the BaseMetaCommand of the MetaCommand instance they are defined in. This implies that unqualified (no path) NameReferences are allowed only.</documentation>
		</annotation>
		<choice minOccurs="0" maxOccurs="unbounded">
			<element name="ParameterRefEntry" type="xtce:ParameterRefEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to a Parameter.  Look up its ParameterType up to find the bit-width.</documentation>
				</annotation>
			</element>
			<element name="ParameterSegmentRefEntry" type="xtce:ParameterSegmentRefEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to a Parameter that is segmented in this container.</documentation>
				</annotation>
			</element>
			<element name="ContainerRefEntry" type="xtce:ContainerRefEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to another Container that is included here.  This is a "has-a" relationship except for a special case, and is not part of the identifying aspects of BaseContainer. The entire construction should be treated as a block in terms of  LocationInContainer addressing. A special case exists for this Entry form if the container being referred to is abstract.  If it is and it has any derived containers (any child containers of it) that are not abstract -- then these instances may be placed here depending on the values in their RestrictionCriteria.  See appinfo. </documentation>
					<appinfo>Implementing this requires capturing inheritance relationships of the various containers.  It is likely that the initial refered to container from the entry is both abstract and has an empty EntryList. All the content supplied the deriving child containers.  Those containers should also specify restrictions such that only one matches and in that way only one of their EntryLists will go here.  Any matching derived child contianer in this manner is also treated as an entire block for purposes of container addressing in this container. Multiple matches by the child form a union and all are inserted.</appinfo>
				</annotation>
			</element>
			<element name="ContainerSegmentRefEntry" type="xtce:ContainerSegmentRefEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to a Container that is segmented in this container.</documentation>
				</annotation>
			</element>
			<element name="StreamSegmentEntry" type="xtce:StreamSegmentEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to a stream that is segmented. </documentation>
				</annotation>
			</element>
			<element name="IndirectParameterRefEntry" type="xtce:IndirectParameterRefEntryType">
				<annotation>
					<documentation xml:lang="en">The parameter included here is named in the ParameterInstance.  The NameReference of that Parameter is interpreted relative to this SpaceSystem.</documentation>
				</annotation>
			</element>
			<element name="ArrayParameterRefEntry" type="xtce:ArrayParameterRefEntryType">
				<annotation>
					<documentation xml:lang="en">The named ArrayParameter (a Parameter that has a ArrayParameterType) is included here.  The dimension sizes are defined here for it.</documentation>
				</annotation>
			</element>
			<element name="ArgumentRefEntry" type="xtce:ArgumentRefEntryType">
				<annotation>
					<documentation xml:lang="en">A reference to an Argument.  Look up its ArgumentType up to find the bit-width.</documentation>
				</annotation>
			</element>
			<element name="ArrayArgumentRefEntry" type="xtce:ArrayArgumentRefEntryType">
				<annotation>
					<documentation xml:lang="en">The named ArrayArgument (an Argument that has an ArrayArgumentType) is included here.  The dimension sizes are defined here for it.</documentation>
				</annotation>
			</element>
			<element name="FixedValueEntry" type="xtce:FixedValueEntryType">
				<annotation>
					<documentation xml:lang="en">Specify the fixed value to insert, the bit size must be supplied to properly zero fill the field.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="MetaCommandContainerType" mixed="false">
		<annotation>
			<documentation xml:lang="en">The Key = Command Op Code.  Each MetaCommand may have one CommandContainer.  The sequence may now contain command fields</documentation>
		</annotation>
		<complexContent mixed="false">
			<extension base="xtce:ContainerType">
				<sequence>
					<element name="EntryList" type="xtce:MetaCommandContainerEntryListType">
						<annotation>
							<documentation xml:lang="en">This is similar to EntryList in SequenceContainer or CommandContainerSet/CommandContainer. But it supplies special entries for Arguments and a FixedValueEntry.</documentation>
						</annotation>
					</element>
					<element name="BaseContainer" type="xtce:MetaCommandBaseContainerType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Extend another MetaCommand/CommandContainer. Generally this item must be set if its MetaCommand is extending another MetaCommand, the reference to ther other CommandContainer must be explicitly set here. In most cases it is discouraged to refer to CommandContainerSet/CommandContainer or a SequenceContainer from this location but this is not illegal. Often for a shared header this is the best approach.  Although unlike the other containers this element is optional, the various inheritance rules associated with the other container apply here as well.   See SequenceContainer/BaseContainer.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="CommandVerifierType">
		<annotation>
			<documentation xml:lang="en">A command verifier is used to check that the command has been successfully executed. Command Verifiers may be either a Custom Algorithm or a Boolean Check or the presence of a Container for a relative change in the value of a Parameter.  The CheckWindow is a time period where the verification must test true to pass.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:OptionalNameDescriptionType">
				<sequence>
					<choice>
						<element name="ComparisonList" type="xtce:ComparisonListType">
							<annotation>
								<documentation xml:lang="en">All comparisons must be true.</documentation>
							</annotation>
						</element>
						<element name="ContainerRef" type="xtce:ContainerRefType">
							<annotation>
								<documentation xml:lang="en">When verification is a new instance of the referenced Container; this verifier return true when the referenced container has been received and processed.</documentation>
							</annotation>
						</element>
						<element name="ParameterValueChange" type="xtce:ParameterValueChangeType">
							<annotation>
								<documentation xml:lang="en">Used to look for relative change in a Parameter value.  Only useful for numeric Parameters</documentation>
							</annotation>
						</element>
						<element name="CustomAlgorithm" type="xtce:InputAlgorithmType">
							<annotation>
								<documentation xml:lang="en">Verification occurs as the result of this CustomAlgorithm.</documentation>
							</annotation>
						</element>
						<element name="BooleanExpression" type="xtce:BooleanExpressionType">
							<annotation>
								<documentation xml:lang="en">Verification occurs as the result of this boolean expression.</documentation>
							</annotation>
						</element>
						<element name="Comparison" type="xtce:ComparisonType">
							<annotation>
								<documentation xml:lang="en">Verification occurs as the result of this comparison.</documentation>
							</annotation>
						</element>
					</choice>
					<choice>
						<element name="CheckWindow" type="xtce:CheckWindowType">
							<annotation>
								<documentation xml:lang="en">A time based check window.</documentation>
							</annotation>
						</element>
						<element name="CheckWindowAlgorithms" type="xtce:CheckWindowAlgorithmsType">
							<annotation>
								<documentation xml:lang="en">Used when times must be calculated.</documentation>
							</annotation>
						</element>
					</choice>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="CommandContainerSetType">
		<annotation>
			<documentation xml:lang="en">Contains an unordered set of command containers.</documentation>
		</annotation>
		<sequence>
			<element name="CommandContainer" type="xtce:CommandContainerType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">CommandContainers define sequences of command parameters or other command containers.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="SignificanceType" mixed="false">
		<annotation>
			<documentation xml:lang="en">Significance provides some cautionary information about the potential consequence of each MetaCommand.</documentation>
		</annotation>
		<attribute name="spaceSystemAtRisk" type="xtce:NameReferenceType">
			<annotation>
				<documentation xml:lang="en">If none is supplied, then the current SpaceSystem is assumed to be the one at risk by the issuance of this command</documentation>
			</annotation>
		</attribute>
		<attribute name="reasonForWarning" type="string">
			<annotation>
				<documentation xml:lang="en">A user defined warning designation.</documentation>
			</annotation>
		</attribute>
		<attribute name="consequenceLevel" type="xtce:LevelsType" default="none">
			<annotation>
				<documentation xml:lang="en">No specific meanings have been assigned to these different levels, but they mirror the Alarm levels of Telemetry.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<simpleType name="VerifierEnumerationType">
		<annotation>
			<documentation xml:lang="en">An enumerated list of verifier types</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="release"/>
			<enumeration value="transferredToRange"/>
			<enumeration value="sentFromRange"/>
			<enumeration value="received"/>
			<enumeration value="accepted"/>
			<enumeration value="queued"/>
			<enumeration value="executing"/>
			<enumeration value="complete"/>
			<enumeration value="failed"/>
		</restriction>
	</simpleType>
	<!--******** End of Command Definition Schema -->
	<!--************************************************-->
	<!--******** Algorithm Schema -->
	<annotation>
		<documentation xml:lang="en">This schema defines the structure for an Algorithm.   An Algorithm may be one of a growing set of pre-defined algorithms or a named escape into a user defined algorithm where (depending on the system) the name of the algorithm may be a java class, a function in a shared library, an external program or some other reference to an outside algorithm.  At some later date, this schema may also allow the logic of the user defined algorithm to be defined within the instance document itself (perhaps using MathML?).</documentation>
	</annotation>
	<complexType name="SimpleAlgorithmType">
		<annotation>
			<documentation xml:lang="en">The simplest form of algorithm, a SimpleAlgorithmType contains an area for a free-form pseudo code description of the algorithm plus a Set of references to external algorithms.  External algorithms are usually unique to a ground system type.   Multiple external algorithms are possible because XTCE documents may be used across multiple ground systems.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="AlgorithmText" type="xtce:AlgorithmTextType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">This optional element may be used to enter Pseudo or actual code for the algorithm.  The language for the algorithm is specified with the language attribute.</documentation>
						</annotation>
					</element>
					<element name="ExternalAlgorithmSet" type="xtce:ExternalAlgorithmSetType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">When the algorithm is stored externally.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="InputAlgorithmType">
		<annotation>
			<documentation xml:lang="en">A set of labeled inputs is added to the SimpleAlgorithmType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SimpleAlgorithmType">
				<sequence>
					<element name="InputSet" type="xtce:InputSetType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Holds one or more ParameterInstanceRefs or Constants, which are inputs to the algorithm.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="InputOutputAlgorithmType">
		<annotation>
			<documentation xml:lang="en">A set of labeled outputs are added to the SimpleInputAlgorithmType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:InputAlgorithmType">
				<sequence>
					<element name="OutputSet" type="xtce:OutputSetType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">The results of the algorithm go here.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="thread" type="boolean" default="false">
					<annotation>
						<documentation xml:lang="en">If true the algorithm is a thread.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="InputOutputTriggerAlgorithmType">
		<annotation>
			<documentation xml:lang="en">A set of labeled triggers is added to the SimpleInputOutputAlgorithmType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:InputOutputAlgorithmType">
				<sequence>
					<element name="TriggerSet" type="xtce:TriggerSetType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">A set of triggers.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="triggerContainer" type="xtce:NameReferenceType" use="optional">
					<annotation>
						<documentation xml:lang="en">First telemetry container from which the output parameter should be calculated.</documentation>
					</annotation>
				</attribute>
				<attribute name="priority" type="integer" use="optional">
					<annotation>
						<documentation xml:lang="en">Algorithm processing priority.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="CalibratorType">
		<annotation>
			<documentation xml:lang="en">Holds various styles of calibrators, used to convert from raw to engineering data.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:OptionalNameDescriptionType">
				<choice>
					<element name="SplineCalibrator" type="xtce:SplineCalibratorType">
						<annotation>
							<documentation xml:lang="en">A calibration type where a segmented line in a raw vs calibrated plane is described using a set of points.  Raw values are converted to calibrated values by finding a position on the line corresponding to the raw value. The algorithm triggers on the input parameter.</documentation>
						</annotation>
					</element>
					<element name="PolynomialCalibrator" type="xtce:PolynomialType">
						<annotation>
							<documentation xml:lang="en">A calibration type where a curve in a raw vs calibrated plane is described using a set of polynomial coefficients.  Raw values are converted to calibrated values by finding a position on the curve corresponding to the raw value. The first coefficient belongs with the X^0 term, the next coefficient belongs to the X^1 term and so on. </documentation>
						</annotation>
					</element>
					<element name="MathOperationCalibrator" type="xtce:MathOperationCalibratorType">
						<annotation>
							<documentation xml:lang="en">Specify a mathematical expression in infix notation, also called Reverse Polish notation.</documentation>
						</annotation>
					</element>
				</choice>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MathAlgorithmType">
		<annotation>
			<documentation xml:lang="en">A simple mathematical operation</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="MathOperation" type="xtce:MathOperationAlgorithmType">
						<annotation>
							<documentation xml:lang="en">Based on the math operation type.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="TriggerSetType">
		<annotation>
			<documentation xml:lang="en">A trigger is used to initiate the processing of some algorithm.  A trigger may be based on an update of a Parameter or on a time basis.  Triggers may also have a rate that limits their firing to a 1/rate basis.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="OnParameterUpdateTrigger" type="xtce:OnParameterUpdateTriggerType">
				<annotation>
					<documentation xml:lang="en">Names a parameter that upon change will start the execution of the algorithm.  Holds a parameter reference name for a parameter that when it changes, will cause this algorithm to be executed.</documentation>
				</annotation>
			</element>
			<element name="OnContainerUpdateTrigger" type="xtce:OnContainerUpdateTriggerType">
				<annotation>
					<documentation xml:lang="en">Names a container that upon reception will start the execution of the algorithm.  Holds a container reference name for a container that when it is received will cause this algorithm to be executed.</documentation>
				</annotation>
			</element>
			<element name="OnPeriodicRateTrigger" type="xtce:OnPeriodicRateTriggerType">
				<annotation>
					<documentation xml:lang="en">Specify that the trigger will be fired at some rate in seconds, instead of by some event based on parameters or containers</documentation>
				</annotation>
			</element>
		</choice>
		<attribute name="name" type="string" use="optional">
			<annotation>
				<documentation xml:lang="en">An optional name for the Trigger</documentation>
			</annotation>
		</attribute>
		<attribute name="triggerRate" type="nonNegativeInteger" use="optional" default="1">
			<annotation>
				<documentation xml:lang="en">How often to trigger</documentation>
			</annotation>
		</attribute>
	</complexType>
	<!--******** End of Algorithm Schema -->
	<!--******** Stream Definitions Schema -->
	<annotation>
		<documentation xml:lang="en">This schema provides a language for defining binary stream data.</documentation>
	</annotation>
	<complexType name="FrameStreamType">
		<annotation>
			<documentation xml:lang="en">The top level type definition for all data streams that are frame based.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:PCMStreamType">
				<sequence>
					<choice>
						<element name="ContainerRef" type="xtce:ContainerRefType">
							<annotation>
								<documentation xml:lang="en">If inheritance has been used (see BaseContainer) to define packets or minor frame, place their root container here to show which stream its children will flow over.  All derived children of that root container may then be found on this stream. It is possible to specify each concrete child individually -- and as they have no derived children, only they will be included (not their parents). This may not completely describe what is necessary for stream processing to packaging, such as CCSDS and virtual channel processing but does capture the relationship between a particular stream and the items that could flow over it.</documentation>
							</annotation>
						</element>
						<element name="ServiceRef" type="xtce:ServiceRefType">
							<annotation>
								<documentation xml:lang="en">If services have been defined, this item refers to the services that flow over the stream.</documentation>
							</annotation>
						</element>
					</choice>
					<element name="StreamRef" type="xtce:StreamRefType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">This is a reference to a connecting stream - say a custom stream.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FixedFrameStreamType">
		<annotation>
			<documentation xml:lang="en">For streams that contain a series of frames with a fixed frame length where the frames are found by looking for a marker in the data.  This marker is sometimes called the frame sync pattern and sometimes the Asynchronous Sync Marker (ASM).  This marker need not be contiguous although it usually is.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:FrameStreamType">
				<sequence>
					<element name="SyncStrategy" type="xtce:FixedFrameSyncStrategyType">
						<annotation>
							<documentation xml:lang="en">Standard synchronization patterns for fixed length frames.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="syncApertureInBits" type="nonNegativeInteger" default="0">
					<annotation>
						<documentation xml:lang="en">Allowed slip (in bits) in either direction for the sync pattern</documentation>
					</annotation>
				</attribute>
				<attribute name="frameLengthInBits" type="long" use="required">
					<annotation>
						<documentation xml:lang="en">The frame length in bits.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="VariableFrameStreamType">
		<annotation>
			<documentation xml:lang="en">For streams that contain a series of frames with a variable frame length where the frames are found by looking for a series of one's or zero's (usually one's).  The series is called the flag.   in the PCM stream that are usually made to be illegal in the PCM stream by zero or one bit insertion.  </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:FrameStreamType">
				<sequence>
					<element name="SyncStrategy" type="xtce:VariableFrameSyncStrategyType">
						<annotation>
							<documentation xml:lang="en">Standard synchronization patterns for variable length frames.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="CustomStreamType">
		<annotation>
			<documentation xml:lang="en">A stream type where some level of custom processing (e.g. convolutional, encryption, compression) is performed.  Has a reference to external algorithms for encoding and decoding algorithms.</documentation>
			<appinfo>Processing software must check to ensure that the attributes encodedStreamRef and decodedStreamRef point to valid Streams.</appinfo>
		</annotation>
		<complexContent>
			<extension base="xtce:PCMStreamType">
				<sequence>
					<element name="EncodingAlgorithm" type="xtce:InputAlgorithmType">
						<annotation>
							<documentation xml:lang="en">Only algorithm inputs are needed.</documentation>
						</annotation>
					</element>
					<element name="DecodingAlgorithm" type="xtce:InputOutputAlgorithmType">
						<annotation>
							<documentation xml:lang="en">Algorithm outputs may be used to set decoding quality parameters.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="encodedStreamRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to a Stream.</documentation>
					</annotation>
				</attribute>
				<attribute name="decodedStreamRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to a Stream.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="PCMStreamType" abstract="true">
		<annotation>
			<documentation xml:lang="en">A PCM Stream Type is the high level definition for all Pulse Code Modulated (PCM) (i.e., binary) streams.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<attribute name="bitRateInBPS" type="double">
					<annotation>
						<documentation xml:lang="en">Bit rate in bits per second.</documentation>
					</annotation>
				</attribute>
				<attribute name="pcmType" type="xtce:BitEncodingType" default="NRZL">
					<annotation>
						<documentation xml:lang="en">Standard PCM encodings.</documentation>
					</annotation>
				</attribute>
				<attribute name="inverted" type="boolean" default="false">
					<annotation>
						<documentation xml:lang="en">If true the stream is inverted.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StreamRefType">
		<annotation>
			<documentation xml:lang="en">Holds a reference to a stream</documentation>
		</annotation>
		<attribute name="streamRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">name of reference stream</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="StreamSetType">
		<annotation>
			<documentation xml:lang="en">Contains an unordered set of Streams.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="FixedFrameStream" type="xtce:FixedFrameStreamType">
				<annotation>
					<documentation xml:lang="en">Fixed frame streams such a CCSDS telemetry stream.  Note that some aspects of that stream such as reed-solomon encoding are not directly described here: use AncillaryData.</documentation>
				</annotation>
			</element>
			<element name="VariableFrameStream" type="xtce:VariableFrameStreamType">
				<annotation>
					<documentation xml:lang="en">Certain aspects of variable frame streams are describe here, for additional items, use AncillaryData.</documentation>
				</annotation>
			</element>
			<element name="CustomStream" type="xtce:CustomStreamType">
				<annotation>
					<documentation xml:lang="en">When a custom algorithm must be used.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="SyncStrategyType">
		<annotation>
			<documentation xml:lang="en">A Sync Strategy specifies the strategy on how to find frames within a stream of PCM data.  The sync strategy is based upon a state machine that begins in the 'Search' state until the first sync marker is found.  Then it goes into the 'Verify' state until a specified number of successive good sync markers are found.  Then, the state machine goes into the 'Lock' state, in the 'Lock' state frames are considered good.  Should a sync marker be missed in the 'Lock' state, the state machine will transition into the 'Check' state, if the next sync marker is where it's expected within a specified number of frames, then the state machine will transition back to the 'Lock' state, it not it will transition back to 'Search'.  </documentation>
		</annotation>
		<sequence>
			<element name="AutoInvert" type="xtce:AutoInvertType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">After searching for the frame sync marker for some number of bits, it may be desirable to invert the incoming data, and then look for frame sync.  In some cases this will require an external algorithm</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="verifyToLockGoodFrames" type="nonNegativeInteger" default="4">
			<annotation>
				<documentation xml:lang="en">The number of good frames to lock on before lock is good. The default is four.</documentation>
			</annotation>
		</attribute>
		<attribute name="checkToLockGoodFrames" type="nonNegativeInteger" default="1">
			<annotation>
				<documentation xml:lang="en">How many frames to check for a good sync after losing lock.  The default is one.</documentation>
			</annotation>
		</attribute>
		<attribute name="maxBitErrorsInSyncPattern" type="nonNegativeInteger" default="0">
			<annotation>
				<documentation xml:lang="en">Maximum number of bit errors in the sync pattern (marker).</documentation>
			</annotation>
		</attribute>
	</complexType>
	<!--******** End of Stream Definition Schema -->
	<!--************************************************-->
	<!--******** DataTypes-->
	<complexType name="AbsoluteTimeDataType">
		<annotation>
			<documentation xml:lang="en">Holds aspects an absolute (to a known epoch) time. For initialValue see xsd:dateTime documentation. For example use the [ISO 8601] extended format CCYY-MM-DDThh:mm:ss where "CC" represents the century, "YY" the year, "MM" the month and "DD" the day, preceded by an optional leading "-" sign to indicate a negative number. If the sign is omitted, "+" is assumed. The letter "T" is the date/time separator and "hh", "mm", "ss" represent hour, minute and second respectively. Additional digits can be used to increase the precision of fractional seconds if desired i.e. the format ss.ss... with any number of digits after the decimal point is supported. 
</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseTimeDataType">
				<attribute name="initialValue" type="dateTime">
					<annotation>
						<documentation xml:lang="en">The initial value in a dateTime format.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="AggregateDataType">
		<annotation>
			<documentation xml:lang="en">Contains multiple values (as members) of any type</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="MemberList" type="xtce:MemberListType">
						<annotation>
							<documentation xml:lang="en">Order is important only if the name of the AggregateParameter or Aggregate Argument is directly referenced in SequenceContainers.  In this case the members are assumed to be added sequentially (in the order listed here) into the Container.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ArrayDataTypeType">
		<annotation>
			<documentation xml:lang="en">An array of values of the type referenced in 'arrayTypeRef' and have the number of array dimensions as specified in 'numberOfDimensions' </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<attribute name="arrayTypeRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to another Type, except that another ArrayType is not supported.</documentation>
					</annotation>
				</attribute>
				<attribute name="numberOfDimensions" type="positiveInteger" use="required">
					<annotation>
						<documentation xml:lang="en">The number of array dimensions, their sizes are set at the container.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BaseDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">An abstract type used by within the schema to derive other data types by the ground system.  </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="UnitSet" type="xtce:UnitSetType">
						<annotation>
							<documentation xml:lang="en">Use one or more Units to represent the Unit expression. For example meters per second squared is 1 m/s^2.  This would be represented here as two Units.  The first would have value of "m", keeping with the defaults of "1" in the attributes.  The second Unit would have a value "s" and an exponent of -2.</documentation>
						</annotation>
					</element>
					<choice minOccurs="0">
						<element name="BinaryDataEncoding" type="xtce:BinaryDataEncodingType">
							<annotation>
								<documentation xml:lang="en">The most relaxed descriptive element for link values.  Use to either describe true type-less data or to describe other DataEncodings which cannot be described with the others.  For example a "strange" floating point data encoding not captured in FloatDataEncoding. Calibration is given as optional custom algorithms.</documentation>
							</annotation>
						</element>
						<element name="FloatDataEncoding" type="xtce:FloatDataEncodingType">
							<annotation>
								<documentation xml:lang="en">Describe either IEEE-754 or MIL-1750A link values. Child elements address the size of the value, calibration, bit and byte order, and so forth.</documentation>
							</annotation>
						</element>
						<element name="IntegerDataEncoding" type="xtce:IntegerDataEncodingType">
							<annotation>
								<documentation xml:lang="en">Describe a variety of integer encodings of link values such as twos complement, child elements include bit/byte order, calibration and bit size of link value.</documentation>
							</annotation>
						</element>
						<element name="StringDataEncoding" type="xtce:StringDataEncodingType">
							<annotation>
								<documentation xml:lang="en">Describe strings encoded in two ways, UTF-8 or UTF-16.  No calibrators are given but bit/byte order and several forms of string size are available.</documentation>
							</annotation>
						</element>
					</choice>
				</sequence>
				<attribute name="baseType" type="xtce:NameReferenceType">
					<annotation>
						<documentation xml:lang="en">Extend another ParameterType or ArgumentType, the result is valid ParameterType or ArgumentType.  See appinfo for a complete description. </documentation>
						<appinfo>ParameterTypes may only inherit from other ParameterTypes (ArgumentTypes may only extend other ArgumentTypes) that have a baseType attribute -- Inheritance may only occur between the same ParameterType (i.e. IntegerParameterTypes may only inherit from another IntegerParameterType) -- Only certain elements and attributes may be overridden or inherited by the child, in some cases these are specific to each ParameterType -- baseType NameReferences that form loops are illegal -- Empty or unspecified content does not override explicit content -- The result of the inheritance must be a valid XTCE ParameterType construction. General rules for most elements and attributes: @name Not inherited by child --- @shortDescription Not inherited by child -- @baseType N/A --- @initialValue The child overrides parent’s shortDescription if supplied, otherwise the child gets the parent’s content if it is present --- LongDescription Not inherited by child --- AliasSet Not inherited by child --- AncillaryDataSet Child’s content prefixed to parent’s content if present --- UnitSet The child’s UnitSet will override the parent’s if it has content (is non-empty), otherwise it gets the parent’s UnitSet.  An empty UnitSet cannot override one that has content. --- DataEncodings The DataEncodings and most of their child elements cannot be overridden or changed by the child.   However the calibrator elements can be set or overridden by the child. An empty (or unspecified) DataEncoding cannot override one with content.  Likewise if the parent has no DataEncoding, the child cannot specify a DataEncodings as these actions fundamentally change the nature of the original ParameterType. The DataEncoding specified in the child, it should match that of the parent. ---  DataEncoding/DefaultCalibrator The child may override the parent’s content or inherit the parent’s content --- DataEncoding/ContextCalibrator The child may add calibrators which are prefixed to any specified by the parent, otherwise the child inherits any specified by the parent --- BinaryDataEncoding/TransformAlgorithm FromBinaryTransformationAlgorithm and ToBinaryTransformationAlgorthm can be overridden by the child if specified in the parent, otherwise the child inherits the parent’s content ---  DefaultAlarm The child overrides the parent’s if supplied, otherwise the child gets the parent’s content if it is present --- ContextAlarmList -- The child’s content is prefixed to the parent’s content if it present.  Specific rules per type are: StringParameterType/@restrictionPattern The child overrides the parent’s  if supplied, otherwise the child gets the parent’s content if it is present --- StringParmeterType/@characterWidth The child may not override parent content --- StringParameterType/ SizeRangeInCharacters The child overrides the parent’s if supplied, otherwise the child gets the parent’s content if it is present --- EnumeratedParameterType/EnumerationList The child may add enumerations which are prefixed to the parent’s. --- IntegerParameterType/@sizeInBits The child cannot override the parent including default values, the child gets the parent’s value even if it specifies a different value ---IntegerParameterType/@signed The child cannot override the parent, the child gets the parent’s value even if specifies a different value --- IntegerParameterType/@validRangeAppliesToCalibrated The child cannot override the parent, the child gets the parent’s value even if specifies a different value --- IntegerParameterType/toString The child overrides the parent’s if supplied, otherwise the child gets the parent’s content if it is present --- IntegerParameterType/ValidRange The child overrides the parent’s if supplied; otherwise the child gets the parent’s content if it is present. An empty ValidRange cannot override one with content. --- FloatParameterType/@sizeInBits The child cannot override the parent, the child gets the parent’s value even if specifies a different value --- FloatParameterType /@validRangeAppliesToCalibrated The child cannot override the parent, the child gets the parent’s value even if specifies a different value --- FloatParameterType /toString The child overrides the parent’s if supplied, otherwise the child gets the parent’s content if it is present --- FloatParameterType /ValidRange The child overrides the parent’s if supplied; otherwise the child gets the parent’s content if it is present. An empty ValidRange cannot override one with content. --- BooleanParameterType/@oneStringValue The child cannot override the parent, the child gets the parent’s value even if specifies a different value --- BooleanParameterType/@zeroStringValue The child cannot override the parent, the child gets the parent’s value even if specifies a different value.</appinfo>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BaseTimeDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">An abstract time related type used by to hold information related to time parameter types.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<sequence minOccurs="0">
						<element name="Encoding" type="xtce:TimeEncodingType">
							<annotation>
								<documentation xml:lang="en">Scale and offset are used in a y =mx +b type relationship (m is the scale and b is the offset) to make adjustments to the encoded value to that it matches the time units.  Binary Encoded time is typically used with a user supplied transform algorithm to convert time data formats that are too difficult to describe in XTCE.</documentation>
							</annotation>
						</element>
					</sequence>
					<sequence minOccurs="0">
						<element name="ReferenceTime" type="xtce:ReferenceTimeType">
							<annotation>
								<documentation xml:lang="en">Capture the epoch.  Or capture which segment this segment is offset from. If this time format is unsegmented it may be more appropriate to ignore OffsetFrom.</documentation>
							</annotation>
						</element>
					</sequence>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BinaryDataType">
		<annotation>
			<documentation xml:lang="en">Contains an arbitrarily large binary value </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseDataType">
				<attribute name="initialValue" type="hexBinary">
					<annotation>
						<documentation xml:lang="en">Extra bits are truncated from the MSB (leftmost)</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BooleanDataType">
		<annotation>
			<documentation xml:lang="en">Contains a boolean value</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseDataType">
				<attribute name="initialValue" type="string">
					<annotation>
						<documentation xml:lang="en">Initial value is always given in calibrated form. </documentation>
						<appinfo>Initial value must match either the oneStringValue or the zeroStringValue.</appinfo>
					</annotation>
				</attribute>
				<attribute name="oneStringValue" type="string" default="True">
					<annotation>
						<documentation xml:lang="en">True is the default but user defined.</documentation>
					</annotation>
				</attribute>
				<attribute name="zeroStringValue" type="string" default="False">
					<annotation>
						<documentation xml:lang="en">False is the default but user defined.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="EnumeratedDataType">
		<annotation>
			<documentation xml:lang="en">Contains an enumerated value - a value that has both an integral and a string representation.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseDataType">
				<sequence>
					<element name="EnumerationList" type="xtce:EnumerationListType">
						<annotation>
							<documentation xml:lang="en">The list of enumerations.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="initialValue" type="string">
					<annotation>
						<documentation xml:lang="en">Initial value is always given in calibrated form.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FloatDataType">
		<annotation>
			<documentation xml:lang="en">Contains information to describe a float data type, including is DataEncoding and other information.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NumericDataType">
				<sequence>
					<element name="ValidRange" type="xtce:FloatValidRangeType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">The Valid Range bounds the universe of possible values this Parameter may have. For Telemetry the valid range is always applied before calibration, regardless of the value of validRangeAppliesToCalibrated. For commanding, if validRangeAppliesToCalibrated is false -- it is applied before calibration to the link DataEncoding. </documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="initialValue" type="double">
					<annotation>
						<documentation xml:lang="en">Initial value is always given in calibrated form</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="xtce:FloatPrecisionsType" default="32">
					<annotation>
						<documentation xml:lang="en">A suggested precision or size in bits.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="IntegerDataType">
		<annotation>
			<documentation xml:lang="en">Contains an integral value</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NumericDataType">
				<sequence>
					<element name="ValidRange" type="xtce:IntegerValidRangeType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">The Valid Range bounds the universe of possible values this Parameter may have. For Telemetry the valid range is always applied before calibration, regardless of the value of validRangeAppliesToCalibrated. For commanding, if validRangeAppliesToCalibrated is false -- it is applied before calibration to the link DataEncoding. </documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="initialValue" type="xtce:FixedIntegerValueType">
					<annotation>
						<documentation xml:lang="en">Initial value is always given in calibrated form.  Default is base 10 form; binary, octal, or hexadecimal values may be given by preceding value with 0[b|B], 0[o|O|, 0[x|X] respectively.</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="positiveInteger" default="32">
					<annotation>
						<documentation xml:lang="en">A suggested precision or size in bits.</documentation>
					</annotation>
				</attribute>
				<attribute name="signed" type="boolean" default="true">
					<annotation>
						<documentation xml:lang="en">Whether it is signed or not, not strictly enforceable for destination data types.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="NumericDataType">
		<annotation>
			<documentation xml:lang="en">An abstract type that is a super type of either an Integer or Float Data type.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseDataType">
				<sequence>
					<element name="ToString" type="xtce:ToStringType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Display information for drawing the numeric value on the screen or in a file in a certain way. There are two ways numeric data can be changed to string data: using a Java style NumberFormat, or using an enumerated list.   Enumerated lists can be assigned to a single value or a value range.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RelativeTimeDataType">
		<annotation>
			<documentation xml:lang="en">Used to describe a relative time, used for time offsets.  For initial value see xsd:duration documentation for example a Relative time is expressed as PnYn MnDTnH nMnS, where nY represents the number of years, nM the number of months, nD the number of days, 'T' is the date/time separator, nH the number of hours, nM the number of minutes and nS the number of seconds. The number of seconds can include decimal digits to arbitrary precision.  For example, to indicate a duration of 1 year, 2 months, 3 days, 10 hours, and 30 minutes, one would write: P1Y2M3DT10H30M. One could also indicate a duration of minus 120 days as: -P120D.  An extension of Schema duration type. </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseTimeDataType">
				<attribute name="initialValue" type="duration">
					<annotation>
						<documentation xml:lang="en">The initial value in a duration format.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringDataType">
		<annotation>
			<documentation xml:lang="en">Contains a String Value</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseDataType">
				<sequence>
					<element name="SizeRangeInCharacters" type="xtce:IntegerRangeType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">For telemetry, specify as UTF-8 or UTF-16 value to match the encoding. This range check will be applied before conversion to the host string data type.  For commanding, the range check occurs on the string host data type encoding, whatever that is -- before injection on the command link.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="initialValue" type="string">
					<annotation>
						<documentation xml:lang="en">Initial values for string types, may include C language style (\n, \t, \", \\, etc.) escape sequences.</documentation>
					</annotation>
				</attribute>
				<attribute name="restrictionPattern" type="string">
					<annotation>
						<documentation xml:lang="en">restriction pattern is a regular expression</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="DataEncodingType">
		<annotation>
			<documentation xml:lang="en">Describes how a particular piece of data is sent or received from some non-native, off-platform device. (e.g. a spacecraft)</documentation>
		</annotation>
		<sequence>
			<element name="ErrorDetectCorrect" type="xtce:ErrorDetectCorrectType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Two forms of error correction, parity and CRC.</documentation>
				</annotation>
			</element>
			<element name="ByteOrderList" type="xtce:ByteOrderType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Used to describe an arbitrary byte order in multibyte parameters.  First byte in list is the first in the stream.  Byte significance is the highest for most significant bytes.  If not included, it is assumed that the most significant byte is first, least significant byte last.</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="bitOrder" type="xtce:BitOrderType" default="mostSignificantBitFirst">
			<annotation>
				<documentation xml:lang="en">Least significant bit first or most significant bit first (the default).</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="IntegerDataEncodingType">
		<annotation>
			<documentation xml:lang="en">For all major encodings of integer data</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DataEncodingType">
				<sequence>
					<element name="DefaultCalibrator" type="xtce:CalibratorType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Applied if no other calibrator in ContextCalibrator can be applied. </documentation>
						</annotation>
					</element>
					<element name="ContextCalibratorList" type="xtce:IntegerContextCalibratorListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Use when different calibrations must be used on the Parameter in different contexts.  Use the first one that tests true. An example of a context is mission phase.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="encoding" type="xtce:IntegerFormatsType" default="unsigned">
					<annotation>
						<documentation xml:lang="en">Several standard encodings for integer values.</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="positiveInteger" default="8">
					<annotation>
						<documentation xml:lang="en">The size in bits of the value.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FloatDataEncodingType">
		<annotation>
			<documentation xml:lang="en">For common encodings of floating point data. Bit sizes correspond to known supported bit sizes for the IEEE_754 (32, 64, 80, 128) and MIL-1750A (32, 48)</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DataEncodingType">
				<sequence>
					<element name="DefaultCalibrator" type="xtce:CalibratorType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Applied if no other calibrators  can be applied in ContextCalibrators.</documentation>
						</annotation>
					</element>
					<element name="ContextCalibratorList" type="xtce:FloatContextCalibratorListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Use when different calibrations must be used on the Parameter in different contexts.  Use the first one that tests true. An example of a context would be mission phase.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="encoding" type="xtce:FloatFormatsType" default="IEEE754_1985">
					<annotation>
						<documentation xml:lang="en">Encoding formats for floating points.</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="xtce:FloatEncodingPrecisionsType" default="32">
					<annotation>
						<documentation xml:lang="en">The size in bits of the value.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringDataEncodingType">
		<annotation>
			<documentation xml:lang="en">Holds various properties related to a string data type.   Encoding may be either UTF-8 or UTF-16.  Care should taken as both may have variable code points per character and UTF-16 may be  big or little endian and some versions have a BOM or byte order marker on it.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DataEncodingType">
				<sequence>
					<element name="SizeInBits" type="xtce:StringSizeInBitsType">
						<annotation>
							<documentation xml:lang="en">A string may either be fixed in length regardless of how many times it appears or is sent, or probably vary in length but it terminated by a special character, or also vary in length but has a size designation leading it.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="encoding" type="xtce:StringFormatsType" default="UTF-8">
					<annotation>
						<documentation xml:lang="en">UTF-8 or UTF-16</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BinaryDataEncodingType">
		<annotation>
			<documentation xml:lang="en">For binary data or for integer, float, string, or time data that is not in any of the known encoding formats.  For any data that is not encoded in any of the known integer, float, string, or time data formats use a To/From transform algorithm.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DataEncodingType">
				<sequence>
					<element name="SizeInBits" type="xtce:IntegerValueType">
						<annotation>
							<documentation xml:lang="en">The size in bits of the data encoding value.</documentation>
						</annotation>
					</element>
					<element name="FromBinaryTransformAlgorithm" type="xtce:InputAlgorithmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Used to convert binary data to an application data type</documentation>
						</annotation>
					</element>
					<element name="ToBinaryTransformAlgorithm" type="xtce:InputAlgorithmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Used to convert binary data from an application data type to binary data</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="EpochType">
		<annotation>
			<documentation xml:lang="en">Epochs may be specified as a date or TAI (which correlates to 1 January 1958)</documentation>
		</annotation>
		<union memberTypes="date xtce:EpochDatesType"/>
	</simpleType>
	<!--******** DataTypes-->
	<!--************************************************-->
	<!--******** Common Types Schema -->
	<!-- Basic elements used for in all dictionaries -->
	<complexType name="AliasSetType">
		<annotation>
			<documentation xml:lang="en">Contains an unordered collection of Alias's</documentation>
		</annotation>
		<sequence>
			<element name="Alias" type="xtce:AliasType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Used to contain an alias (alternate) name or ID for the object.   For example, a parameter may have a mnemonic, an on-board id, and special IDs used by various ground software applications; all of these are alias's.  Some ground system processing equipment has some severe naming restrictions on parameters (e.g., names must less then 12 characters, single case or integral id's only); their alias's provide a means of capturing each name in a "nameSpace".</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ANDedConditionsType">
		<annotation>
			<documentation xml:lang="en">A list of boolean comparisons, or boolean groups that are logically ANDed together.  Any ORed conditions in the list are evaluated first.</documentation>
		</annotation>
		<choice minOccurs="2" maxOccurs="unbounded">
			<element name="Condition" type="xtce:ComparisonCheckType">
				<annotation>
					<documentation xml:lang="en">Operand operator value, or Operand1 operator Operand2.</documentation>
				</annotation>
			</element>
			<element name="ORedConditions" type="xtce:ORedConditionsType">
				<annotation>
					<documentation xml:lang="en">One or more OR conditions</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<simpleType name="BinaryType">
		<annotation>
			<documentation xml:lang="en">A simple restriction on string for hexadecimal numbers.  Must be in 0b or 0B form.</documentation>
		</annotation>
		<restriction base="string">
			<pattern value="0[bB][0-1]+"/>
		</restriction>
	</simpleType>
	<complexType name="BooleanExpressionType">
		<annotation>
			<documentation xml:lang="en">Holds an arbitrarily complex boolean expression</documentation>
		</annotation>
		<choice>
			<element name="Condition" type="xtce:ComparisonCheckType">
				<annotation>
					<documentation xml:lang="en">Operand operator value, or Operand1 operator Operand2.</documentation>
				</annotation>
			</element>
			<element name="ANDedConditions" type="xtce:ANDedConditionsType">
				<annotation>
					<documentation xml:lang="en">One or more AND conditions</documentation>
				</annotation>
			</element>
			<element name="ORedConditions" type="xtce:ORedConditionsType">
				<annotation>
					<documentation xml:lang="en">One or more OR conditions</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="ByteOrderType">
		<annotation>
			<documentation xml:lang="en">An ordered list of bytes where the order of the bytes is in stream order.  Each byte has an attribute giving its significance.</documentation>
			<appinfo>The software must check to ensure that the significance of each byte is unique, and does not contain bytes of greater significance greater than the size of the object</appinfo>
		</annotation>
		<sequence minOccurs="2" maxOccurs="unbounded">
			<element name="Byte" type="xtce:ByteType">
				<annotation>
					<documentation xml:lang="en">A single byte's significance.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ComparisonCheckType">
		<annotation>
			<documentation xml:lang="en">A ParameterInstanceRef to a value or another parameter instance</documentation>
		</annotation>
		<sequence>
			<element name="ParameterInstanceRef1" type="xtce:ParameterInstanceRefType">
				<annotation>
					<documentation xml:lang="en">First operand.</documentation>
				</annotation>
			</element>
			<element name="ComparisonOperator" type="xtce:ComparisonOperatorsType">
				<annotation>
					<documentation xml:lang="en">The standard comparison operators: equals, not equals, less than, greater than, less than or equals, greater than or equals.</documentation>
				</annotation>
			</element>
			<choice>
				<element name="ParameterInstanceRef2" type="xtce:ParameterInstanceRefType">
					<annotation>
						<documentation xml:lang="en">Parameter is assumed to be of the same type as the comparison Parameter</documentation>
					</annotation>
				</element>
				<element name="Value" type="string">
					<annotation>
						<documentation xml:lang="en">Value is assumed to be of the same type as the comparison Parameter. Governing rules are the as Comparison/@value.</documentation>
					</annotation>
				</element>
			</choice>
		</sequence>
	</complexType>
	<complexType name="ComparisonType">
		<annotation>
			<documentation xml:lang="en">A simple ParameterInstanceRef to value comparison.  The string supplied in the value attribute needs to be converted to a type matching the Parameter being compared to.  Numerical values are assumed to be base 10 unless preceded  by 0x (hexadecimal), 0o (octal), or 0b (binary).</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterInstanceRefType">
				<attribute name="comparisonOperator" type="xtce:ComparisonOperatorsType" default="==">
					<annotation>
						<documentation xml:lang="en">Operators:  equals, less than, less than or equal to, great than, greater than or equal to and not equal.</documentation>
					</annotation>
				</attribute>
				<attribute name="value" type="string" use="required">
					<annotation>
						<documentation xml:lang="en">The value used in the comparison, given as a string it must be converted to the data type of the parameter, also depends on the setting of useCalibratedValue. For telemetry and useCalibrated is true and there is calibrator -- use the ParameterType's data type, otherwise the DataEncoding's data type.  Commanding is opposite, if useCalibratedValue is true and there is a calibrator use the DataEncoding's data type.  Formatting:  xsd:string, xsd:integer, xtce:HexadecimalType, xtce:OctalType, xtce:BinaryType, xsd:boolean, enum label, xsd:duration, xsd:dateTime, xsd:float and xsd:double.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="ComparisonOperatorsType">
		<annotation>
			<documentation xml:lang="en">Operators to use when testing a boolean condition for a validity check</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="=="/>
			<enumeration value="!="/>
			<enumeration value="&lt;"/>
			<enumeration value="&lt;="/>
			<enumeration value=">"/>
			<enumeration value=">="/>
		</restriction>
	</simpleType>
	<complexType name="ContextCalibratorType">
		<annotation>
			<documentation xml:lang="en">Context calibrations are applied when the ContextMatch is true.  Context calibrators override Default calibrators</documentation>
		</annotation>
		<sequence>
			<element name="ContextMatch" type="xtce:MatchCriteriaType">
				<annotation>
					<documentation>The user defined context the calibrator is valid or defined in, the expression must evaluate to true for the calibrator to be valid.</documentation>
				</annotation>
			</element>
			<element name="Calibrator" type="xtce:CalibratorType">
				<annotation>
					<documentation>One of Spline, Polynomial or MathOperationCalibrator, and an optional name, long description, alias set and ancillary data set.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="DecimalValueType">
		<annotation>
			<documentation xml:lang="en">Contains a Numeric value; value may be provided directly or via the value in a parameter.</documentation>
		</annotation>
		<choice>
			<element name="FixedValue" type="decimal">
				<annotation>
					<documentation xml:lang="en">A numeric literal.</documentation>
				</annotation>
			</element>
			<element name="DynamicValue" type="xtce:DynamicValueType">
				<annotation>
					<documentation xml:lang="en">Uses a parameter instance to obtain the value.  The parameter value may be optionally adjusted by a Linear function or use a series of boolean expressions to lookup the value.  Anything more complex and a DynamicValue with a CustomAlgorithm may be used  </documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="DescriptionType" abstract="true">
		<annotation>
			<documentation xml:lang="en">An abstract type definition used as the base for NameDescriptionType or OptionalNameDescriptionType.  The short description is intended to be used for quick "memory jogger" descriptions of the object.  </documentation>
		</annotation>
		<sequence>
			<element name="LongDescription" type="string" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">The long description is intended to be used for explanatory descriptions of the object and may include HTML markup.  Long descriptions are of unbounded length</documentation>
				</annotation>
			</element>
			<element name="AliasSet" type="xtce:AliasSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A set of one or more Aliases</documentation>
				</annotation>
			</element>
			<element name="AncillaryDataSet" type="xtce:AncillaryDataSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A set of one or more AncillaryData. Use to hold user defined content.</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="shortDescription" type="string" use="optional">
			<annotation>
				<documentation xml:lang="en">It is strongly recommended that the short description be kept under 80 characters in length</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ErrorDetectCorrectType">
		<annotation>
			<documentation xml:lang="en">A simple element that provides for simple, but common error checking and detection.</documentation>
		</annotation>
		<choice>
			<element name="Parity" type="xtce:ParityType">
				<annotation>
					<documentation xml:lang="en">Bit position starts with 'zero'.</documentation>
				</annotation>
			</element>
			<element name="CRC" type="xtce:CRCType">
				<annotation>
					<documentation xml:lang="en">Cyclic Redundancy Check (CRC) definition. Legal values for coefficients are 0 or 1. Exponents must be integer values.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<simpleType name="FixedIntegerValueType">
		<annotation>
			<documentation xml:lang="en">A simple union type combining integer, octal, binary, and hexadecimal types</documentation>
		</annotation>
		<union memberTypes="integer xtce:HexadecimalType xtce:OctalType xtce:BinaryType"/>
	</simpleType>
	<complexType name="HeaderType">
		<annotation>
			<documentation xml:lang="en">Schema for a Header record.  A header contains general information about the system or subsystem.</documentation>
		</annotation>
		<sequence>
			<element name="AuthorSet" type="xtce:AuthorSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Zero or more Authors</documentation>
				</annotation>
			</element>
			<element name="NoteSet" type="xtce:NoteSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Zero or more Notes</documentation>
				</annotation>
			</element>
			<element name="HistorySet" type="xtce:HistorySetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Zero or more Histories</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="version" type="string">
			<annotation>
				<documentation xml:lang="en">A user defined version.</documentation>
			</annotation>
		</attribute>
		<attribute name="date" type="string">
			<annotation>
				<documentation xml:lang="en">The date in a user defined format.</documentation>
			</annotation>
		</attribute>
		<attribute name="classification" type="string" default="NotClassified">
			<annotation>
				<documentation xml:lang="en">A user defined classification with a default of NotClassified.</documentation>
			</annotation>
		</attribute>
		<attribute name="classificationInstructions" type="string">
			<annotation>
				<documentation xml:lang="en">Instructions associated with the classification.</documentation>
			</annotation>
		</attribute>
		<attribute name="validationStatus" type="xtce:ValidationStatusType" use="required">
			<annotation>
				<documentation xml:lang="en">The level of operational use of the document, one of: Unknown, Working, Draft, test, Validated, Released, Withdrawn.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<simpleType name="HexadecimalType">
		<annotation>
			<documentation xml:lang="en">A simple restriction on string for hexadecimal numbers.  Must be in 0x or 0X form.</documentation>
		</annotation>
		<restriction base="string">
			<pattern value="0[xX][0-9a-fA-F]+"/>
		</restriction>
	</simpleType>
	<complexType name="IntegerValueType">
		<annotation>
			<documentation xml:lang="en">Contains an Integer value; value may be provided directly or via the value in a parameter.</documentation>
		</annotation>
		<choice>
			<element name="FixedValue" type="xtce:FixedIntegerValueType">
				<annotation>
					<documentation xml:lang="en">A fixed value in either xsd:integer, or hex, octal or binary schema defined formats.</documentation>
				</annotation>
			</element>
			<element name="DynamicValue" type="xtce:DynamicValueType">
				<annotation>
					<documentation xml:lang="en">Uses a parameter instance to obtain the value.  The parameter value may be optionally adjusted by a Linear function or use a series of boolean expressions to lookup the value.  Anything more complex and a DynamicValue with a CustomAlgorithm may be used  </documentation>
				</annotation>
			</element>
			<element name="DiscreteLookupList" type="xtce:DiscreteLookupListType">
				<annotation>
					<documentation xml:lang="en">Lookup a value using the lookup list supplied.  Use the first match found.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<simpleType name="MathOperatorsType">
		<annotation>
			<documentation xml:lang="en">Mathematical operators</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="+"/>
			<enumeration value="-"/>
			<enumeration value="*"/>
			<enumeration value="/"/>
			<enumeration value="%"/>
			<enumeration value="^"/>
			<enumeration value="&amp;"/>
			<enumeration value="|"/>
			<enumeration value="&lt;&lt;"/>
			<enumeration value="&gt;&gt;"/>
			<enumeration value="&gt;&gt;&gt;"/>
			<enumeration value="y^x"/>
			<enumeration value="ln"/>
			<enumeration value="log"/>
			<enumeration value="e^x"/>
			<enumeration value="1/x"/>
			<enumeration value="x!"/>
			<enumeration value="tan"/>
			<enumeration value="cos"/>
			<enumeration value="sin"/>
			<enumeration value="atan"/>
			<enumeration value="acos"/>
			<enumeration value="asin"/>
			<enumeration value="tanh"/>
			<enumeration value="cosh"/>
			<enumeration value="sinh"/>
			<enumeration value="atanh"/>
			<enumeration value="acosh"/>
			<enumeration value="asinh"/>
			<enumeration value="swap"/>
		</restriction>
	</simpleType>
	<complexType name="MatchCriteriaType">
		<annotation>
			<documentation xml:lang="en">Contains either a simple Comparison, a ComparisonList, an arbitrarily complex BooleanExpression or an escape to an externally defined algorithm</documentation>
		</annotation>
		<choice>
			<element name="Comparison" type="xtce:ComparisonType">
				<annotation>
					<documentation xml:lang="en">A single parameter instance comparison.</documentation>
				</annotation>
			</element>
			<element name="ComparisonList" type="xtce:ComparisonListType">
				<annotation>
					<documentation xml:lang="en">A list of comparisons, all must be true.</documentation>
				</annotation>
			</element>
			<element name="BooleanExpression" type="xtce:BooleanExpressionType">
				<annotation>
					<documentation xml:lang="en">An arbitrarily complex boolean expression.</documentation>
				</annotation>
			</element>
			<element name="CustomAlgorithm" type="xtce:InputAlgorithmType">
				<annotation>
					<documentation xml:lang="en">An escape to an externally defined algorithm.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="MathOperationType">
		<annotation>
			<documentation xml:lang="en">Postfix (aka Reverse Polish Notation (RPN)) notation is used to describe mathmatical equations. It uses a stack where operands (either fixed values or ParameterInstances) are pushed onto the stack from first to last in the XML. As the operators are specified, each pops off operands as it evaluates them, and pushes the result back onto the stack. In this case postfix is used to avoid having to specify parenthesis. To convert from infix to postfix, use Dijkstra's "shunting yard" algorithm.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="ValueOperand" type="double">
				<annotation>
					<documentation xml:lang="en">Use a constant in the calculation</documentation>
				</annotation>
			</element>
			<element name="ThisParameterOperand">
				<annotation>
					<documentation xml:lang="en">Use the value of this parameter in the calculation</documentation>
				</annotation>
			</element>
			<element name="ParameterInstanceRefOperand" type="xtce:ParameterInstanceRefType">
				<annotation>
					<documentation xml:lang="en">Use the value of another Parameter in the calculation</documentation>
				</annotation>
			</element>
			<element name="Operator" type="xtce:MathOperatorsType">
				<annotation>
					<documentation xml:lang="en">Binary operators: +, -, *, /, %, ^ operate on the top two values in the stack, leaving the result on the top of the stack.  Unary operators: 1/x, x!, e^x, ln, log, and trigonometric operators operate on the top member of the stack also leaving the result on the top of the stack.  'ln' is a natural log where 'log' is a base 10 logarithm.  Trigonometric operators use degrees.  'swap' swaps the top two members of the stack.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<simpleType name="NameType">
		<annotation>
			<documentation xml:lang="en">Used for "directory" style unique names.  We need to preclude spaces, '.', '/', ':", "[" and "]".   Only letters, digits, '_', ' ' and "-" are allowed </documentation>
		</annotation>
		<restriction base="string">
			<pattern value="[a-zA-Z0-9_\-]*"/>
		</restriction>
	</simpleType>
	<complexType name="NameDescriptionType">
		<annotation>
			<documentation xml:lang="en">The type definition used by most elements that require a name with optional descriptions.   </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DescriptionType">
				<attribute name="name" type="xtce:NameType" use="required">
					<annotation>
						<documentation xml:lang="en">The name of the item.  For some elements the name should be unique per SpaceSystem (including both "sides" - TelemetryMetaData and CommandMetaData)</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="NameReferenceType">
		<annotation>
			<documentation xml:lang="en">Used when referencing a directory style "NameType".   All characters are legal.  All name references use a Unix ‘like’ name referencing mechanism across the SpaceSystem Tree (e.g., SimpleSat/Bus/EPDS/BatteryOne/Voltage) where the '/', ‘..’ and ‘.’ are used to navigate through the hierarchy.  The use of an unqualified name will search for an item in the current SpaceSystem first, then if none is found, in progressively higher SpaceSystems.  A SpaceSystem is a name space (i.e., a named type declared in MetaCommandData is also declared in TelemetryMetaData - and vice versa).</documentation>
		</annotation>
		<restriction base="string"/>
	</simpleType>
	<complexType name="NumberToStringType">
		<annotation>
			<documentation xml:lang="en">There are two ways numeric data can be changed to string data: using a Java style NumberFormat, or using an enumerated list.   Enumerated lists can be assigned to a single value or a value range.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:OptionalNameDescriptionType">
				<choice>
					<choice maxOccurs="unbounded">
						<element name="ValueEnumeration" type="xtce:ValueEnumerationType">
							<annotation>
								<documentation xml:lang="en">A number or range assigned to a string.</documentation>
							</annotation>
						</element>
						<element name="RangeEnumeration" type="xtce:FloatEnumerationRangeType">
							<annotation>
								<documentation xml:lang="en">A string value associated with a numerical range.</documentation>
							</annotation>
						</element>
					</choice>
					<element name="NumberFormat" type="xtce:NumberFormatType">
						<annotation>
							<documentation xml:lang="en">Formatting information for the number, not all need apply.</documentation>
						</annotation>
					</element>
				</choice>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="OctalType">
		<annotation>
			<documentation xml:lang="en">A simple restriction on string for hexadecimal numbers.  Must be in 0o or 0O form.</documentation>
		</annotation>
		<restriction base="string">
			<pattern value="0[oO][0-7]+"/>
		</restriction>
	</simpleType>
	<complexType name="OptionalNameDescriptionType">
		<annotation>
			<documentation xml:lang="en">The type definition used by most elements that have an optional name with optional descriptions.  </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DescriptionType">
				<attribute name="name" type="xtce:NameType" use="optional">
					<annotation>
						<documentation xml:lang="en">The optional name of the item.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ORedConditionsType">
		<annotation>
			<documentation xml:lang="en">A list of boolean comparisons, or boolean groups that are logically ORed together.  Any ANDed conditions in the list are evaluated first.</documentation>
		</annotation>
		<choice minOccurs="2" maxOccurs="unbounded">
			<element name="Condition" type="xtce:ComparisonCheckType">
				<annotation>
					<documentation xml:lang="en">Operand operator value, or Operand1 operator Operator2.</documentation>
				</annotation>
			</element>
			<element name="ANDedConditions" type="xtce:ANDedConditionsType">
				<annotation>
					<documentation xml:lang="en">One or more AND conditions</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="ParameterSetType">
		<annotation>
			<documentation xml:lang="en">Used by both the TelemetryMetaData and the CommandMetaData components each may be built independently.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="Parameter" type="xtce:ParameterType">
				<annotation>
					<documentation xml:lang="en">A Parameter has a ParameterType which holds most of the descriptive information about a particular Parameter.</documentation>
					<appinfo>Processing softare needs to ensure that the parameter type actually exist.</appinfo>
				</annotation>
			</element>
			<element name="ParameterRef" type="xtce:ParameterRefType">
				<annotation>
					<documentation xml:lang="en">Used to include a Parameter defined in another sub-system in this sub-system. Refer to this Parameter by the name portion of its NameRefernece only in SequenceContainer. Care should be taken to avoid naming conflicts. For example if there is a Parameter named "P1", and a ParameterRef with a NameReference of "myOtherSpaceSystem/P1", then they are in conflict if P1 is used in SequenceContainer/EntryList/ParameterRefEntry since specifying P1 there could refer to either definition here.  This conflict cannot be determined by the keyRefs.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="PolynomialType">
		<annotation>
			<documentation xml:lang="en">A polynomial expression.  For example: 3 + 2x.</documentation>
		</annotation>
		<sequence>
			<element name="Term" type="xtce:TermType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more terms in a polynomial expression. </documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<simpleType name="RadixType">
		<annotation>
			<documentation xml:lang="en">Specifies the number base</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="Decimal"/>
			<enumeration value="Hexadecimal"/>
			<enumeration value="Octal"/>
			<enumeration value="Binary"/>
		</restriction>
	</simpleType>
	<complexType name="ReferenceTimeType">
		<annotation>
			<documentation xml:lang="en">Most time values are relative to another time e.g. seconds are relative to minutes, minutes are relative to hours.  This type is used to describe this relationship starting with the least significant time Parameter to and progressing to the most significant time parameter.  </documentation>
		</annotation>
		<choice>
			<element name="OffsetFrom" type="xtce:ParameterInstanceRefType">
				<annotation>
					<documentation xml:lang="en">The parameter instance this parameter is associated with or directly offset by, for example minutes is offset from seconds, and so forth.</documentation>
				</annotation>
			</element>
			<element name="Epoch" type="xtce:EpochType">
				<annotation>
					<documentation xml:lang="en">Either Jan 1, 1958 (TAI) or a date specifically inserted.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<simpleType name="RelativeTimeType">
		<annotation>
			<documentation xml:lang="en">Used to describe a relative time.  Normally used for time offsets.  A Relative time is expressed as PnYn MnDTnH nMnS, where nY represents the number of years, nM the number of months, nD the number of days, 'T' is the date/time separator, nH the number of hours, nM the number of minutes and nS the number of seconds. The number of seconds can include decimal digits to arbitrary precision.  For example, to indicate a duration of 1 year, 2 months, 3 days, 10 hours, and 30 minutes, one would write: P1Y2M3DT10H30M. One could also indicate a duration of minus 120 days as: -P120D.  An extension of Schema duration type. </documentation>
		</annotation>
		<restriction base="duration"/>
	</simpleType>
	<complexType name="RepeatType">
		<annotation>
			<documentation xml:lang="en">Hold a structure that can be repeated X times, where X is the Count</documentation>
		</annotation>
		<sequence>
			<element name="Count" type="xtce:IntegerValueType">
				<annotation>
					<documentation xml:lang="en">Value (either fixed or dynamic) that contains the count of repeated structures.</documentation>
				</annotation>
			</element>
			<element name="Offset" type="xtce:OffsetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Indicates the distance between repeating entries (the last bit of one entry to the start bit of the next entry)</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="SplinePointType">
		<annotation>
			<documentation xml:lang="en">A single spline point that form part of a curve that may be drawn to interpolate raw to calibrated values on an x-y graph.  Common curves are step, linear, and various splines of higher order.</documentation>
		</annotation>
		<attribute name="raw" type="double" use="required">
			<annotation>
				<documentation xml:lang="en">For telemetry, the point on the x-axis of a two dimensional graph.  This is the raw input value from the DataEncoding.   For commanding this is the raw input value from the ParameterType or ArgumentType.</documentation>
			</annotation>
		</attribute>
		<attribute name="calibrated" type="double" use="required">
			<annotation>
				<documentation xml:lang="en">For telemetry, the point on the y-axis of a two dimensional graph.  This is calibrated value that corresponds to the raw input value.  For command this is the DataEncoding value.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<simpleType name="TimeUnits">
		<annotation>
			<documentation xml:lang="en">base time units.  days, months, years have obvious ambiguity and should be avoided</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="seconds"/>
			<enumeration value="picoSeconds"/>
			<enumeration value="days"/>
			<enumeration value="months"/>
			<enumeration value="years"/>
		</restriction>
	</simpleType>
	<complexType name="UnitType" mixed="true">
		<annotation>
			<documentation xml:lang="en">Used to hold the unit(s) plus possibly the exponent and factor for the units</documentation>
		</annotation>
		<attribute name="power" type="decimal" use="optional" default="1">
			<annotation>
				<documentation xml:lang="en">The exponent of the unit.</documentation>
			</annotation>
		</attribute>
		<attribute name="factor" type="string" default="1">
			<annotation>
				<documentation xml:lang="en">Multiply the unit by this.</documentation>
			</annotation>
		</attribute>
		<attribute name="description" type="string">
			<annotation>
				<documentation xml:lang="en">An optional description of the unit.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ValueEnumerationType">
		<annotation>
			<documentation xml:lang="en">Contains a value and an associated string label. </documentation>
		</annotation>
		<attribute name="value" type="integer" use="required">
			<annotation>
				<documentation xml:lang="en">Integer value associated with the label.</documentation>
			</annotation>
		</attribute>
		<attribute name="label" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">The label associated with the value.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<!--Types used with alarms-->
	<simpleType name="AlarmLevels">
		<annotation>
			<documentation xml:lang="en">An enumerated list of the possible alarm levels</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="normal"/>
			<enumeration value="watch"/>
			<enumeration value="warning"/>
			<enumeration value="distress"/>
			<enumeration value="critical"/>
			<enumeration value="severe"/>
		</restriction>
	</simpleType>
	<complexType name="AlarmConditionsType">
		<annotation>
			<documentation xml:lang="en">When the alarm is determined by boolean logic</documentation>
		</annotation>
		<sequence>
			<element name="WatchAlarm" type="xtce:MatchCriteriaType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">More severe than normal.</documentation>
				</annotation>
			</element>
			<element name="WarningAlarm" type="xtce:MatchCriteriaType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">More severe than watch.</documentation>
				</annotation>
			</element>
			<element name="DistressAlarm" type="xtce:MatchCriteriaType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">More severe than distress.</documentation>
				</annotation>
			</element>
			<element name="CriticalAlarm" type="xtce:MatchCriteriaType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">More severe than critical.</documentation>
				</annotation>
			</element>
			<element name="SevereAlarm" type="xtce:MatchCriteriaType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">More severe than critical; the most severe.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="AlarmRangesType">
		<annotation>
			<documentation xml:lang="en">Contains five ranges: Watch, Warning, Distress, Critical, and Severe each in increasing severity.  Normally, only the Warning and Critical ranges are used and the color yellow is associated with Warning and the color red is associated with Critical.   The ranges given are valid for numbers lower than the min and higher than the max values.   These ranges should not overlap, but if they do, assume the most severe range is to be applied.  All ranges are optional and it is quite allowed for there to be only one end of the range.  Range values are in calibrated engineering units.</documentation>
		</annotation>
		<sequence>
			<element name="WatchRange" type="xtce:FloatRangeType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">The lowest range besides normal/nominal.</documentation>
				</annotation>
			</element>
			<element name="WarningRange" type="xtce:FloatRangeType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">The next higher range from watch.</documentation>
				</annotation>
			</element>
			<element name="DistressRange" type="xtce:FloatRangeType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">The next higher range from warning.</documentation>
				</annotation>
			</element>
			<element name="CriticalRange" type="xtce:FloatRangeType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">The next higher range from critical.</documentation>
				</annotation>
			</element>
			<element name="SevereRange" type="xtce:FloatRangeType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">The most severe range.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="AlarmType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Alarms associated with numeric data types</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:OptionalNameDescriptionType">
				<choice minOccurs="0">
					<element name="AlarmConditions" type="xtce:AlarmConditionsType">
						<annotation>
							<documentation xml:lang="en">A MatchCriteria may be specified for each of the 5 alarm levels.  Each level is optional and the alarm should be the highest level to test true.</documentation>
						</annotation>
					</element>
					<element name="CustomAlarm" type="xtce:InputAlgorithmType">
						<annotation>
							<documentation xml:lang="en">An escape for ridiculously complex alarm conditions.  Will trigger on changes to the containing Parameter.  </documentation>
						</annotation>
					</element>
				</choice>
				<attribute name="minViolations" type="positiveInteger" default="1">
					<annotation>
						<documentation xml:lang="en">Number of successive instances that meet the alarm conditions for the Alarm to trigger.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BooleanAlarmType">
		<annotation>
			<documentation xml:lang="en">Alarm conditions for Boolean types</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType"/>
		</complexContent>
	</complexType>
	<complexType name="FloatRangeType">
		<annotation>
			<documentation xml:lang="en">A range of numbers.  "minInclusive", "minExclusive", "maxInclusive" and "maxExclusive" attributes are borrowed from the W3C schema language.  Only two make sense in any one definition.</documentation>
		</annotation>
		<attribute name="minInclusive" type="double">
			<annotation>
				<documentation xml:lang="en">The minimum range value inclusive.</documentation>
			</annotation>
		</attribute>
		<attribute name="minExclusive" type="double">
			<annotation>
				<documentation xml:lang="en">The minimum range value exclusive.</documentation>
			</annotation>
		</attribute>
		<attribute name="maxInclusive" type="double">
			<annotation>
				<documentation xml:lang="en">The maximum range value inclusive.</documentation>
			</annotation>
		</attribute>
		<attribute name="maxExclusive" type="double">
			<annotation>
				<documentation xml:lang="en">The maximum range value exclusive.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="EnumerationAlarmType">
		<annotation>
			<documentation xml:lang="en">Alarm conditions for Enumerations.</documentation>
			<appinfo>Processing software must ensure that the enumeration values in the alarms are legal enumeration given in the definition.</appinfo>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType">
				<sequence>
					<element name="EnumerationAlarmList" type="xtce:EnumerationAlarmListType">
						<annotation>
							<documentation xml:lang="en">A list of enumeration alarm.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="defaultAlarmLevel" type="xtce:AlarmLevels" default="normal">
					<annotation>
						<documentation xml:lang="en">The default alarm level for enumerations that do not match.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="IntegerRangeType">
		<annotation>
			<documentation xml:lang="en">An integral range of numbers.  "min", and "max".</documentation>
		</annotation>
		<attribute name="minInclusive" type="xtce:FixedIntegerValueType">
			<annotation>
				<documentation xml:lang="en">A minimum number inclusive.</documentation>
			</annotation>
		</attribute>
		<attribute name="maxInclusive" type="xtce:FixedIntegerValueType">
			<annotation>
				<documentation xml:lang="en">A maximum number inclusive.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="NumericContextAlarmType">
		<annotation>
			<documentation xml:lang="en">Context alarms are applied when the ContextMatch is true.  Context alarms override Default alarms</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NumericAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:MatchCriteriaType">
						<annotation>
							<documentation xml:lang="en">An expression that must be true in order for the alarm to trigger.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="NumericAlarmType">
		<annotation>
			<documentation xml:lang="en">Alarms associated with numeric data types</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType">
				<sequence>
					<element name="StaticAlarmRanges" type="xtce:StaticAlarmRangesType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">StaticAlarmRanges are used to trigger alarms when the parameter value passes some threshold value. The default inside form, places the unspecified normal range inside all the other ranges, and the range ends of each range point to the infinities.  If the form is set to outside, the range ends point to each other and the unspecified normal range is outside all the ranges.</documentation>
						</annotation>
					</element>
					<element name="ChangeAlarmRanges" type="xtce:ChangeAlarmRangesType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">ChangeAlarmRanges are used to trigger alarms when the parameter value's rate-of-change is either too fast or too slow.   The change may be with respect to time (the default) or with respect to samples (delta alarms) - the changeType attribute determines this.  The change may also be ether relative (as a percentage change) or absolute as set by the changeBasis attribute.  The alarm also requires the spanOfInterest in both samples and seconds to have passed before it is to trigger.  For time based rate of change alarms, the time specified in spanOfInterestInSeconds is used to calculate the change.  For sample based rate of change alarms, the change is calculated over the number of samples specified in spanOfInterestInSeconds.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringAlarmType">
		<annotation>
			<documentation xml:lang="en">Alarm conditions for Strings</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType">
				<sequence>
					<element name="StringAlarmList" type="xtce:StringAlarmListType">
						<annotation>
							<documentation xml:lang="en">A list of string alarms.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="defaultAlarmLevel" type="xtce:AlarmLevels" default="normal">
					<annotation>
						<documentation xml:lang="en">The alarm level if no string match occurs.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="TimeAlarmType">
		<annotation>
			<documentation xml:lang="en">Alarms associated with time data types</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType">
				<sequence>
					<element name="StaticAlarmRanges" type="xtce:TimeAlarmStaticAlarmRangesType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">StaticAlarmRanges are used to trigger alarms when the parameter value passes some threshold value</documentation>
						</annotation>
					</element>
					<element name="ChangePerSecondAlarmRanges" type="xtce:ChangePerSecondAlarmRangesType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">ChangePerSecondAlarmRanges are used to trigger alarms when the parameter value's rate-of-change passes some threshold value.  An alarm condition that triggers when the value changes too fast (or too slow)</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="TimeContextAlarmType">
		<annotation>
			<documentation xml:lang="en">Holds a alarm properties associated with time parameters and a context.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:TimeAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:MatchCriteriaType">
						<annotation>
							<documentation xml:lang="en">An expression that must be true in order for the alarm to trigger.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!--******** End of Common Types Schema -->
	<!--******** New Types for 1.2-->
	<complexType name="FloatEnumerationRangeType">
		<annotation>
			<documentation xml:lang="en">Specify a numeric range and label</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:FloatRangeType">
				<attribute name="label" type="string" use="required">
					<annotation>
						<documentation xml:lang="en">The label associated with the range.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringArgumentType">
		<annotation>
			<documentation xml:lang="en">Extends a StringDataType to form the StringArgumentType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:StringDataType"/>
		</complexContent>
	</complexType>
	<complexType name="EnumeratedArgumentType">
		<annotation>
			<documentation xml:lang="en">Extends an EnumeratedDataType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:EnumeratedDataType"/>
		</complexContent>
	</complexType>
	<complexType name="BinaryArgumentType">
		<annotation>
			<documentation xml:lang="en">Extends a BinaryDataType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BinaryDataType"/>
		</complexContent>
	</complexType>
	<complexType name="IntegerArgumentType">
		<annotation>
			<documentation xml:lang="en">Extends an IntegerDataType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:IntegerDataType"/>
		</complexContent>
	</complexType>
	<complexType name="FloatArgumentType">
		<annotation>
			<documentation xml:lang="en">Extends a FloatDataType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:FloatDataType"/>
		</complexContent>
	</complexType>
	<complexType name="BooleanArgumentType">
		<annotation>
			<documentation xml:lang="en">Extends a BooleanDataType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BooleanDataType"/>
		</complexContent>
	</complexType>
	<complexType name="RelativeTimeArgumentType">
		<annotation>
			<documentation xml:lang="en">Extends a RelativeTimeDataType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:RelativeTimeDataType"/>
		</complexContent>
	</complexType>
	<complexType name="AbsoluteTimeArgumentType">
		<annotation>
			<documentation xml:lang="en">Extends an AbsoluteTimeDataType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AbsoluteTimeDataType"/>
		</complexContent>
	</complexType>
	<complexType name="ArrayArgumentType">
		<annotation>
			<documentation xml:lang="en">Extends an ArrayDataType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ArrayDataTypeType"/>
		</complexContent>
	</complexType>
	<complexType name="AggregateArgumentType">
		<annotation>
			<documentation xml:lang="en">Extends an AggregateDataType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AggregateDataType"/>
		</complexContent>
	</complexType>
	<complexType name="ArgumentType">
		<annotation>
			<documentation xml:lang="en">Describe the name of an Argument its NameReference to an ArgumentType in ArgumentTypeSet.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<attribute name="argumentTypeRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to an Argument.</documentation>
					</annotation>
				</attribute>
				<attribute name="initialValue" type="string">
					<annotation>
						<documentation xml:lang="en">Used to set the initial calibrated values of Arguments.  Will overwrite an initial value defined for the ArgumentType.  For integer types base 10 (decimal) form is assumed unless: if proceeded by a 0b or 0B, value is in base two (binary form, if proceeded by a 0o or 0O, values is in base 8 (octal) form, or if proceeded by a 0x or 0X, value is in base 16 (hex) form.  Floating point types may be specified in normal (100.0) or scientific (1.0e2) form.  Time types are specified using the ISO 8601 formats described for XTCE time data types.  Initial values for string types, may include C language style (\n, \t, \", \\, etc.) escape sequences.  Initial values for Array or Aggregate types may not be set.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="TransmissionConstraintType">
		<annotation>
			<documentation xml:lang="en">A specialized form of MatchCriteria for transmission constraint that may be suspendable or time out.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:MatchCriteriaType">
				<attribute name="timeOut" type="xtce:RelativeTimeType">
					<annotation>
						<documentation xml:lang="en">Pause during timeOut, fail when the timeout passes</documentation>
					</annotation>
				</attribute>
				<attribute name="suspendable" type="boolean" default="false">
					<annotation>
						<documentation xml:lang="en">Indicates whether the constraints for a Command may be suspended.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ContextSignificanceType">
		<annotation>
			<documentation xml:lang="en">A significance with a context.</documentation>
		</annotation>
		<sequence>
			<element name="ContextMatch" type="xtce:MatchCriteriaType">
				<annotation>
					<documentation xml:lang="en">A user defined expression that must evaluate to true in order for this significance to apply.</documentation>
				</annotation>
			</element>
			<element name="Significance" type="xtce:SignificanceType">
				<annotation>
					<documentation xml:lang="en">Some guidelines for spaceSystemAtRisk  -- generally it should at least be interpreted as this SpaceSystem.  Therefore much of the time this attribute could be left unspecified.  If only a single SpaceSystem is defined and SystemName is in use, the user may wish to interpret the command as meaning the SystemName if this field is not specified. Otherwise the field should reference a valid SpaceSystem.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="InterlockType">
		<annotation>
			<documentation xml:lang="en">The type for the Interlock element.</documentation>
		</annotation>
		<attribute name="scopeToSpaceSystem" type="xtce:NameReferenceType">
			<annotation>
				<documentation xml:lang="en">The name of a SpaceSystem this Interlock applies to.  By default, it only applies to the SpaceSystem that contains this MetaCommand.</documentation>
			</annotation>
		</attribute>
		<attribute name="verificationToWaitFor" type="xtce:VerifierEnumerationType" default="complete">
			<annotation>
				<documentation xml:lang="en">Select from the set of verifications available.</documentation>
			</annotation>
		</attribute>
		<attribute name="verificationProgressPercentage" type="decimal">
			<annotation>
				<documentation xml:lang="en">Only applies when the verificationToWaitFor attribute is 'queued' or 'executing'.</documentation>
			</annotation>
		</attribute>
		<attribute name="suspendable" type="boolean" default="false">
			<annotation>
				<documentation xml:lang="en">A flag that indicates that under special circumstances, this Interlock can be suspended.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="BaseMetaCommandType">
		<annotation>
			<documentation xml:lang="en">A BaseMetaCommandType holds the baseMetaCommandRef and the argument assignments.</documentation>
		</annotation>
		<sequence>
			<element name="ArgumentAssignmentList" type="xtce:ArgumentAssignmentListType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A list of arguments whose values will be assigned as part of the inheritance.</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="metaCommandRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">The NameReference of another MetaCommand.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ArgumentAssignmentType">
		<annotation>
			<documentation xml:lang="en">Holds a name argument and its value.</documentation>
		</annotation>
		<attribute name="argumentName" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">The NameReference to an Argument, often just the name is sufficient.</documentation>
			</annotation>
		</attribute>
		<attribute name="argumentValue" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">The value the argument should be assigned.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ArgumentAssignmentListType">
		<annotation>
			<documentation xml:lang="en">Holds one or more ArgumentAssignments.</documentation>
		</annotation>
		<sequence>
			<element name="ArgumentAssignment" type="xtce:ArgumentAssignmentType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Specify the name of the argument as a NameReference.  If the argument in question is defined in a MetaCommand in another SpaceSystem, give the path to that SpaceSystem as well here in the Argument. That path essentially refers to a MetaCommand in that SpaceSystem, the argument in question should be defined there, and that MetaCommand should be in this MetaCommand's parent inheritance chain.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ArgumentListType">
		<annotation>
			<documentation xml:lang="en">Holds one or more Arguments.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="Argument" type="xtce:ArgumentType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Arguments are local to each command. Its Type may be in any SpaceSystem.</documentation>
					<appinfo>Processing softare must ensure that the argument types actually exists.</appinfo>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="TransmissionConstraintListType">
		<annotation>
			<documentation xml:lang="en">Holds one or more TransmissionConstraint.</documentation>
		</annotation>
		<sequence>
			<element name="TransmissionConstraint" type="xtce:TransmissionConstraintType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">A CommandTransmission constraint is used to check that the command can be run in the current operating mode and may block the transmission of the command if the constraint condition is true. Constraints are defined as conditional expressions.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ContextSignificanceListType">
		<annotation>
			<documentation xml:lang="en">Holds one or more ContextSignificance</documentation>
		</annotation>
		<sequence>
			<element name="ContextSignificance" type="xtce:ContextSignificanceType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">A context is user defined, and consists of a condition expression.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="TransferredToRangeVerifierType">
		<annotation>
			<documentation xml:lang="en">A TransferredToRangeVerifierType is a CommandVerifierType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<complexType name="SentFromRangeVerifierType">
		<annotation>
			<documentation xml:lang="en">A SentFromRangeVerifierType is a CommandVerifierType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<complexType name="ReceivedVerifierType">
		<annotation>
			<documentation xml:lang="en">A ReceivedVerifierType is a CommandVerifierType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<complexType name="AcceptedVerifierType">
		<annotation>
			<documentation xml:lang="en">AcceptedVerifierType is a CommandVerifierType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<complexType name="QueuedVerifierType">
		<annotation>
			<documentation xml:lang="en">A QueuedVerifierType is a CommandVerifierType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<complexType name="ExecutionVerifierType">
		<annotation>
			<documentation xml:lang="en">A ExecutionVerifierType is a CommandVerifierType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType">
				<sequence minOccurs="0">
					<element name="PercentComplete" type="xtce:DecimalValueType">
						<annotation>
							<documentation xml:lang="en">Values should be from 0 to 100</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="CompleteVerifierType">
		<annotation>
			<documentation xml:lang="en">A CompleteVerifierType is a CommandVerifierType, it adds a ReturnParmRef to holds an optional returning parameter value.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType">
				<sequence minOccurs="0">
					<element name="ReturnParmRef" type="xtce:ParameterRefType">
						<annotation>
							<documentation xml:lang="en">Return the named Parameter, it is implied this is the most recent instance.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FailedVerifierType">
		<annotation>
			<documentation xml:lang="en">A FailedVerifierType is a CommandVerifierType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<complexType name="VerifierSetType">
		<annotation>
			<documentation xml:lang="en">Holds all the possible verifiers</documentation>
		</annotation>
		<sequence>
			<element name="TransferredToRangeVerifier" type="xtce:TransferredToRangeVerifierType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Transferred to range means the command has been received to the network that connects the ground system to the spacecraft.  Obviously, this verifier must come from something other than the spacecraft. </documentation>
				</annotation>
			</element>
			<element name="SentFromRangeVerifier" type="xtce:SentFromRangeVerifierType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Sent from range means the command has been transmitted to the spacecraft by the network that connects the ground system to the spacecraft.  Obviously, this verifier must come from something other than the spacecraft. </documentation>
				</annotation>
			</element>
			<element name="ReceivedVerifier" type="xtce:ReceivedVerifierType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A verifier that simply means the SpaceSystem has received the command.</documentation>
				</annotation>
			</element>
			<element name="AcceptedVerifier" type="xtce:AcceptedVerifierType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A verifier that means the SpaceSystem has accepted the command</documentation>
				</annotation>
			</element>
			<element name="QueuedVerifier" type="xtce:QueuedVerifierType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A verifer that means the command is scheduled for execution by the SpaceSystem.</documentation>
				</annotation>
			</element>
			<element name="ExecutionVerifier" type="xtce:ExecutionVerifierType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A verifier that indicates that the command is being executed.  An optional Element indicates how far along the command has progressed either as a fixed value or an (possibly scaled) ParameterInstance value.</documentation>
				</annotation>
			</element>
			<element name="CompleteVerifier" type="xtce:CompleteVerifierType" minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">A possible set of verifiers that all must be true for the command be considered completed.  </documentation>
				</annotation>
			</element>
			<element name="FailedVerifier" type="xtce:FailedVerifierType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">When true, indicates that the command failed.  timeToWait is how long to wait for the FailedVerifier to test true.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ParameterToSetType">
		<annotation>
			<documentation xml:lang="en">Holds the parameterRef, on optional verification level it is tied to, and either the derivation to get the new value, or the explicit new value itself</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterRefType">
				<choice>
					<element name="Derivation" type="xtce:DerivationType">
						<annotation>
							<documentation xml:lang="en">Result of the MathOperation will be the new Parameter value</documentation>
						</annotation>
					</element>
					<element name="NewValue" type="string">
						<annotation>
							<documentation xml:lang="en">Explicit new value</documentation>
						</annotation>
					</element>
				</choice>
				<attribute name="setOnVerification" type="xtce:VerifierEnumerationType" default="complete">
					<annotation>
						<documentation xml:lang="en">Verification stages</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ParameterToSetListType">
		<annotation>
			<documentation xml:lang="en">Holds one or more ParameterToSet.</documentation>
		</annotation>
		<sequence>
			<element name="ParameterToSet" type="xtce:ParameterToSetType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Sets a Parameter to a new value (either from a derivation or explicitly) after the command has been verified (all verifications have passed).</documentation>
					<appinfo>The information in value must be convereted to the parameter type of parameter. </appinfo>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ParameterToSuspendAlarmsOnType">
		<annotation>
			<documentation xml:lang="en">Holds a parmeterRef, a relative time to suspend for, and an optional verifier to trigger on</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterRefType">
				<attribute name="suspenseTime" type="xtce:RelativeTimeType" use="required">
					<annotation>
						<documentation xml:lang="en">A relative time period</documentation>
					</annotation>
				</attribute>
				<attribute name="verifierToTriggerOn" type="xtce:VerifierEnumerationType" default="release">
					<annotation>
						<documentation xml:lang="en">Verifier stages</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ParametersToSuspendAlarmsOnSetType">
		<annotation>
			<documentation xml:lang="en">One or more ParametersToSuspendAlarmsOn</documentation>
		</annotation>
		<sequence>
			<element name="ParameterToSuspendAlarmsOn" type="xtce:ParameterToSuspendAlarmsOnType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Will suspend all Alarms associated with this Parameter for the given suspense time after the given verifier</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ParameterType">
		<annotation>
			<documentation xml:lang="en">Holds the name, parameterTypeRef and ParameterProperties in particular.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="ParameterProperties" type="xtce:ParameterPropertiesType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Various properties associated with Parameter not captured in the ParameterType.  Use TimeAssociation to capture a time offset from a time stamp, often called "super-comm'ed".  For telemetry, there is no need to specify telemetered in dataSource for every telemetered Parameter, do not specify in general.  For commanding, there is no need to specify local for every command parameter, do not specify in general. Setting constant does not mean the user cannot override, to do that set readOnly to true.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="parameterTypeRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">NameReferences to a ParameterType for this Parameter</documentation>
					</annotation>
				</attribute>
				<attribute name="initialValue" type="string" use="optional">
					<annotation>
						<documentation xml:lang="en">Used to set the initial calibrated values of Parameters.  Will overwrite an initial value defined for the ParameterType.  For integer types base 10 (decimal) form is assumed unless: if proceeded by a 0b or 0B, value is in base two (binary form, if proceeded by a 0o or 0O, values is in base 8 (octal) form, or if proceeded by a 0x or 0X, value is in base 16 (hex) form.  Floating point types may be specified in normal (100.0) or scientific (1.0e2) form.  Time types are specified using the ISO 8601 formats described for XTCE time data types.  Initial values for string types, may include C language style (\n, \t, \", \\, etc.) escape sequences.  Initial values for Array or Aggregate types may not be set.</documentation>
						<appinfo>The value must be converted to the parameter type's format.</appinfo>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MetaCommandStepArgumentType">
		<annotation>
			<documentation xml:lang="en">Holds the name and argument and its value.  Similar to ArgumentAssignment</documentation>
		</annotation>
		<attribute name="name" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">Argument name</documentation>
			</annotation>
		</attribute>
		<attribute name="value" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">Argument value</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="MetaCommandStepArgumentListType">
		<annotation>
			<documentation xml:lang="en">Holds one or more Step Arguments</documentation>
		</annotation>
		<sequence>
			<element name="Argument" type="xtce:MetaCommandStepArgumentType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more arguments in the step and its assigned value</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="MetaCommandStepType">
		<annotation>
			<documentation xml:lang="en">Holds the metaCommandRef and its optional argument list (similar to an ArgumentAssignment list)</documentation>
		</annotation>
		<sequence>
			<element name="ArgumentList" type="xtce:MetaCommandStepArgumentListType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Similar to argument assignment</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="metaCommandRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">NameReference to a MetaCommand</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="MetaCommandStepListType">
		<annotation>
			<documentation xml:lang="en">Holds one or more MetaCommandStep</documentation>
		</annotation>
		<sequence>
			<element name="MetaCommandStep" type="xtce:MetaCommandStepType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">A step in the block</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="BlockMetaCommandType">
		<annotation>
			<documentation xml:lang="en">Holds a name for the block, and the command steps associated with it, among other items.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="MetaCommandStepList" type="xtce:MetaCommandStepListType">
						<annotation>
							<documentation xml:lang="en">The list of MetaCommands</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MetaCommandSetType">
		<annotation>
			<documentation xml:lang="en">Holds one or more MetaCommand, MetaCommandRef or BlockMetaCommand.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="MetaCommand" type="xtce:MetaCommandType">
				<annotation>
					<documentation xml:lang="en">A MetaCommand is a command description, it includes the description of the command packaging and a variety of elements which can be used to describe various aspects of behavior related to commanding.</documentation>
				</annotation>
				<key name="ArgumentNameKey">
					<annotation>
						<documentation xml:lang="en">Arguments should be unique per command</documentation>
					</annotation>
					<selector xpath="xtce:ArgumentList/*"/>
					<field xpath="@name"/>
				</key>
			</element>
			<element name="MetaCommandRef" type="xtce:NameReferenceType">
				<annotation>
					<documentation xml:lang="en">Used to include a MetaCommand defined in another SpaceSystem in this SpaceSystem. The named item may be refered to by its name only in another MetaCommand or BlockMetaCommand. Name uniqueness issues similar to ParameterRef exist here as well.</documentation>
				</annotation>
			</element>
			<element name="BlockMetaCommand" type="xtce:BlockMetaCommandType">
				<annotation>
					<documentation xml:lang="en">BlockMetaCommands are simply a list of individual MetaCommands that can be packaged up in a single BlockMetaCommand.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="MessageRefSetType">
		<annotation>
			<documentation xml:lang="en">Holds a MessageRef</documentation>
		</annotation>
		<sequence>
			<element name="MessageRef" type="xtce:MessageRefType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Holds a messageRef</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ContainerRefSetType">
		<annotation>
			<documentation xml:lang="en">Holds one or more ContainerRef</documentation>
		</annotation>
		<sequence>
			<element name="ContainerRef" type="xtce:ContainerRefType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Holds a containerRef</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="AliasType">
		<annotation>
			<documentation xml:lang="en">Holds a nameSpace and alias name</documentation>
		</annotation>
		<attribute name="nameSpace" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">User defined namespace, may be empty.  A defined namespace allows for alias scope. An empty namespace means the alias is visible everywhere the item that is associated is visible, with a define nameSpace the scope is defined by the user.</documentation>
				<documentation xml:lang="en">User defined namespace, may be empty.  A defined namespace allows for alias scope. An empty namespace means the alias is visible everywhere the item that is associated is visible, with a define nameSpace the scope is defined by the user.</documentation>
			</annotation>
		</attribute>
		<attribute name="alias" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">User defined alias name</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="AncillaryDataType">
		<annotation>
			<documentation xml:lang="en">Holds name, mimeType, and href and the ancillary information in the element itself</documentation>
		</annotation>
		<simpleContent>
			<extension base="string">
				<attribute name="name" type="string" use="required">
					<annotation>
						<documentation xml:lang="en">The name of the Ancillary item</documentation>
					</annotation>
				</attribute>
				<attribute name="mimeType" type="string" default="text/plain">
					<annotation>
						<documentation xml:lang="en">An optional mimeType, defaults to text/plain.  In theory for example this element could hold HTML</documentation>
					</annotation>
				</attribute>
				<attribute name="href" type="anyURI">
					<annotation>
						<documentation xml:lang="en">An optional URI for more information associated with this Ancillary</documentation>
					</annotation>
				</attribute>
			</extension>
		</simpleContent>
	</complexType>
	<complexType name="AncillaryDataSetType">
		<annotation>
			<documentation xml:lang="en">Holds one or more AncillaryData</documentation>
		</annotation>
		<sequence>
			<element name="AncillaryData" type="xtce:AncillaryDataType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Use for any other data associated with each named object.  May be used to include administrative data (e.g., version, CM or tags) or potentially any MIME type.  Data may be included or given as an href. </documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="AuthorSetType">
		<annotation>
			<documentation xml:lang="en">Holds zero or more Authors</documentation>
		</annotation>
		<sequence>
			<element name="Author" type="string" minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Capture authorship information, format is user defined.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="NoteSetType">
		<annotation>
			<documentation xml:lang="en">Holds zero or more Note</documentation>
		</annotation>
		<sequence>
			<element name="Note" type="string" minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Capture notes related to authorship of document. Format is user defined.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="HistorySetType">
		<annotation>
			<documentation xml:lang="en">Holds zero or more History</documentation>
		</annotation>
		<sequence>
			<element name="History" type="string" minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Capture creation or change history of document, format is user defined.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="MessageType">
		<annotation>
			<documentation xml:lang="en">Holds the name, the MatchCriteria and the Container NameReference for the Message.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="MatchCriteria" type="xtce:MatchCriteriaType">
						<annotation>
							<documentation xml:lang="en">A set of matches for the identifying location in the container construction (including any of its has-a entries, their entries, and so on).</documentation>
						</annotation>
					</element>
					<element name="ContainerRef" type="xtce:ContainerRefType">
						<annotation>
							<documentation xml:lang="en">A container reference to a container composed of other entries and possibly other containers which fully describes a packet or frame. The referred to container should not use BaseContainer, nor any of its referenced Container, nor any of their entries, and so on.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MessageSetType">
		<annotation>
			<documentation xml:lang="en">Holds one or more Message</documentation>
		</annotation>
		<sequence>
			<element name="Message" type="xtce:MessageType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">A message contains a set of matches, comparisons to values in the identifying areas of a packet or minor frame, and a reference to a container.  That container should be purely constructed using "has a" techniques, BaseContainer should not be specified anywhere in its construction.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="MathOperationAlgorithmType">
		<annotation>
			<documentation xml:lang="en">Holds a MathOperation, TriggerSet and named output parameter.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:MathOperationType">
				<sequence>
					<element name="TriggerSet" type="xtce:TriggerSetType">
						<annotation>
							<documentation xml:lang="en">The set of trriggers associated with this operation</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="outputParameterRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to parameter, the result of this operation is stored in this parameter's instance</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="OnParameterUpdateTriggerType">
		<annotation>
			<documentation xml:lang="en">Holds a parameterRef</documentation>
		</annotation>
		<attribute name="parameterRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">A NameReference to a Parameter</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="OnContainerUpdateTriggerType">
		<annotation>
			<documentation xml:lang="en">Holds a containerRef</documentation>
		</annotation>
		<attribute name="containerRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">A NameRereference to a Container</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="OnPeriodicRateTriggerType">
		<annotation>
			<documentation xml:lang="en">Holds a fireRateInSeconds</documentation>
		</annotation>
		<attribute name="fireRateInSeconds" type="decimal" use="required">
			<annotation>
				<documentation xml:lang="en">Specify how often to fire the trigger in decimal seconds</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="MemberType">
		<annotation>
			<documentation xml:lang="en">Holds the member name its type</documentation>
		</annotation>
		<attribute name="name" type="xtce:NameType" use="required">
			<annotation>
				<documentation xml:lang="en">The name of the member</documentation>
			</annotation>
		</attribute>
		<attribute name="typeRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">A parameterType or argumentType, except an ArrayType if it is used in a container</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="MemberListType">
		<annotation>
			<documentation xml:lang="en">Holds one or more Members.</documentation>
		</annotation>
		<sequence>
			<element name="Member" type="xtce:MemberType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Each member of the Aggregate Data has a name and a reference to another DataType.  The other DataType may be any other DataType except ArrayType if it is used in a container.  The reason is the array dimension sizes cannot be set in this scenario.  Circular references are not allowed.</documentation>
					<appinfo>Circular references are illegal.</appinfo>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="DiscreteLookupType">
		<annotation>
			<documentation xml:lang="en">A DescreteLookupType is a MatchCriteria but adds a value that is return if the MatchCriteria evaluates to true.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:MatchCriteriaType">
				<attribute name="value" type="integer" use="required">
					<annotation>
						<documentation xml:lang="en">The value of the discrete</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="DiscreteLookupListType">
		<annotation>
			<documentation xml:lang="en">Holds DiscreteLookups</documentation>
		</annotation>
		<sequence>
			<element name="DiscreteLookup" type="xtce:DiscreteLookupType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more DiscreteLookup</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="LinearAdjustmentType">
		<annotation>
			<documentation xml:lang="en">Holds the slope and intercept of a lline equation, y=mx+b</documentation>
		</annotation>
		<attribute name="slope" type="integer" default="0">
			<annotation>
				<documentation xml:lang="en">In y=mx+b, the m</documentation>
			</annotation>
		</attribute>
		<attribute name="intercept" type="integer" default="0">
			<annotation>
				<documentation xml:lang="en">In y=mx+b, the b</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="DynamicValueType">
		<annotation>
			<documentation xml:lang="en">Holds a ParameterInstanceRef and LinearAdjustment.</documentation>
		</annotation>
		<sequence>
			<element name="ParameterInstanceRef" type="xtce:ParameterInstanceRefType">
				<annotation>
					<documentation xml:lang="en">A ParameterInstance NameReference to the parameter that holds the dynamic value.</documentation>
				</annotation>
			</element>
			<element name="LinearAdjustment" type="xtce:LinearAdjustmentType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A slope and intercept may be applied to scale or shift the value of the parameter in the dynamic value</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="DimensionType" mixed="false">
		<annotation>
			<documentation xml:lang="en">Holds a StartingIndex and EndingIndex.</documentation>
		</annotation>
		<sequence>
			<element name="StartingIndex" type="xtce:IntegerValueType">
				<annotation>
					<documentation xml:lang="en">The starting index of the dimension.   The convention that zero is the first index is assumed.</documentation>
				</annotation>
			</element>
			<element name="EndingIndex" type="xtce:IntegerValueType">
				<annotation>
					<documentation xml:lang="en">The ending index.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="DimensionListType">
		<annotation>
			<documentation xml:lang="en">One or more Dimensions.</documentation>
		</annotation>
		<sequence>
			<element name="Dimension" type="xtce:DimensionType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Provide the starting and ending indexes of the array. A zero index is the assumed convention for the starting index.   If the array dimensions have been unrolled in the EntryList or across containers, the set of entries and their indexes representing this are user defined.</documentation>
					<appinfo>Check that for an ArrayParameterType of size N, there should be N Dimensions</appinfo>
					<appinfo>An array made up by multiple Entries should not have indexes that overlap, but should be continuous.</appinfo>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="LocationInContainerInBitsType">
		<annotation>
			<documentation xml:lang="en">Holds a referenceLocation offset value in either FixedValue, DynamicValue or DiscreteLookupList forms, and an  optional referenceLocation attribute. Its default is prevEntry.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:IntegerValueType">
				<attribute name="referenceLocation" type="xtce:ReferenceLocationType" default="previousEntry">
					<annotation>
						<documentation xml:lang="en">The location may be relative to the start of the container (containerStart), relative to the end of the previous entry (previousEntry), relative to the end of the container (containerEnd), or relative to the entry that follows this one (nextEntry).  If going forward (containerStart and previousEntry) then the location refers to the start of the Entry.  If going backwards (containerEnd and nextEntry) then, the location refers to the end of the entry.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="UnitSetType">
		<annotation>
			<documentation xml:lang="en">Zero or more Unit.</documentation>
		</annotation>
		<sequence>
			<element name="Unit" type="xtce:UnitType" minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">The content of this element holds the unit name, such as "meters" or "seconds". The power and factor attributes can be used to represent expressions. </documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ParityType">
		<annotation>
			<documentation xml:lang="en">Holds a type, bitsFromReference, and reference.</documentation>
		</annotation>
		<attribute name="type" type="xtce:ParityFormType" use="required">
			<annotation>
				<documentation xml:lang="en">Even or Odd</documentation>
			</annotation>
		</attribute>
		<attribute name="bitsFromReference" type="nonNegativeInteger" use="required">
			<annotation>
				<documentation xml:lang="en">The location of the parity bit</documentation>
			</annotation>
		</attribute>
		<attribute name="reference" type="xtce:ReferenceType" default="start">
			<annotation>
				<documentation xml:lang="en">Calculate parity from the start or end</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="CRCType">
		<annotation>
			<documentation xml:lang="en">Holds bitsFromReference, reference and Polynomial of the CRC.</documentation>
		</annotation>
		<sequence>
			<element name="Polynomial" type="xtce:PolynomialType">
				<annotation>
					<documentation xml:lang="en">One or more terms forming a polynomial equation.</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="bitsFromReference" type="nonNegativeInteger">
			<annotation>
				<documentation xml:lang="en">The offset from the reference of the CRC</documentation>
			</annotation>
		</attribute>
		<attribute name="reference" type="xtce:ReferenceType" default="start">
			<annotation>
				<documentation xml:lang="en">Calculate CRC from either start or end.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ByteType">
		<annotation>
			<documentation xml:lang="en">Holds a byte's significance.</documentation>
		</annotation>
		<attribute name="byteSignificance" type="nonNegativeInteger" use="required">
			<annotation>
				<documentation xml:lang="en">A user defined significance, the higher the value, the higher the significance.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ArgumentRefEntryType">
		<annotation>
			<documentation xml:lang="en">Holds an argumentRef and optional LocationInContainerInBits, RepeatEntry and IncludeCondition elements.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="argumentRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to an Argument.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FixedValueEntryType">
		<annotation>
			<documentation xml:lang="en">Holds an optional attributes name, bitOrder, byteOrderList, required attributes binaryValue, sizeInBits and optional LocationInContainerInBits, RepeatEntry and IncludeCondition. </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="name" type="string">
					<annotation>
						<documentation xml:lang="en">An optional name, this name cannot be NameReferenced and is only a form of documentation.</documentation>
					</annotation>
				</attribute>
				<attribute name="binaryValue" type="hexBinary" use="required">
					<annotation>
						<documentation xml:lang="en">The value in hex.</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="integer" use="required">
					<annotation>
						<documentation xml:lang="en">The value's bit length.</documentation>
					</annotation>
				</attribute>
				<attribute name="bitOrder" type="xtce:BitOrderType" use="optional" default="mostSignificantBitFirst">
					<annotation>
						<documentation xml:lang="en">mostSignificantBitFirst (default) or leastSignificantBitFirst.</documentation>
					</annotation>
				</attribute>
				<attribute name="byteOrderList" type="string">
					<annotation>
						<documentation xml:lang="en">A string of comma delimited nonNegativeInteger significances representing the byte ordering.  If not specified, the default meaning is most significant byte first. Higher values mean a higher byte order, the lowest ordered byte should start at zero. The first item given appears first in the stream. For example, 0,1,2,3 is least significant byte first for a 32 bit quantity and 3,2,1,0 is most significant byte first.   The number of significances should match the sizeInBits, including partially filled bytes. For example a value of 31 bits should have four significances in a comma delimited list, whereas a 24 bit item would have three.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ArrayArgumentRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is an array argument. This entry is somewhat special because the entry may represent only a part of the Array and it's important to describe which dimensions of the array come first in the sequence as well as the size of the array.  Holds a NameReference to the array argument and dimensionList which gives the dimension sizes, and the optional attribute lastEntryForThisArrayInstance.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<sequence>
					<element name="DimensionList" type="xtce:DimensionListType">
						<annotation>
							<documentation xml:lang="en">Where the Dimension list is in this form:  Array[1stDim][2ndDim][lastDim].  The last dimension is assumed to be the least significant - that is this dimension will cycle through its combination before the next to last dimension changes. This is row major order. The order MUST ascend or the array will need to be broken out entry by entry. </documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="argumentRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to a Argument that has an ArrayArgumentType.</documentation>
					</annotation>
				</attribute>
				<attribute name="lastEntryForThisArrayInstance" type="boolean" default="false">
					<annotation>
						<documentation xml:lang="en">Mark this entry as the last entry in the array.  This can be used when an array is split across several containers and this container holds the last part.  For example suppose a 1-D array is of size 3.   If the first container has the first index, and the second container has the second index and the third contianer has the third, then the third container should set this flag to true.   In that way, the entire array spread across the three containers can be interpreted as being of size 3 and it can be re-assembled as such.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RestrictionCriteriaType">
		<annotation>
			<documentation xml:lang="en">Holds several forms of expressions that evaluate to true or false.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:MatchCriteriaType">
				<choice>
					<element name="NextContainer" type="xtce:ContainerRefType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">For telemetry, this restriction takes the form of the successful reception of another container in the stream.  Perhaps that container has a NextContainer as well -- resulting in a Graph of containers that must arrive before this one is said to match.</documentation>
						</annotation>
					</element>
				</choice>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BaseContainerType">
		<annotation>
			<documentation xml:lang="en">Holds a containerRef and RestrictionCriteria.  It is legal to extend SequenceContainer or CommandContainerSet/Container, although usually this occurs on the same "side", this may not always be the case.  For example a common header may be shared by both sides and only defined once in ContainerSet.  MetaCommand/CommandContainer is not visible to this BaseContainer.</documentation>
		</annotation>
		<sequence>
			<element name="RestrictionCriteria" type="xtce:RestrictionCriteriaType">
				<annotation>
					<documentation xml:lang="en">For telemetry, given that this Container is entending another, the RestrictionCriteria lists conditions that must be true for this Container to be 'this' subContainer type.  This takes several forms: a simple Comparison List, a Boolean Expression, and/or in a Graph of containers established by the NextContainer. Usually these items are likely the identifying areas for your format and consist of one or more Comparisons. For example the application ID in CCSDS Primary Headers.. Use as many comparisons as is necessary to uniquely identify this description in a conceptual stream of bits, atlhough Parameters specified in the comparison do not need to be in the EntryList they usually are. In addition they may be anywhere in the entire construction that is visible from this location, either through this EntryList or this BaseContainer.  For commanding, this element is interpreted as an assertion.  Supplying values that make the assertions true; those values go into the named parameters. </documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="containerRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">A NameReference to a container.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="MetaCommandBaseContainerType">
		<annotation>
			<documentation xml:lang="en">Holds containerRef to the container being extended and an optional RestrictionCriteria.</documentation>
		</annotation>
		<sequence>
			<element name="RestrictionCriteria" type="xtce:RestrictionCriteriaType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">For commanding, this element is interpreted as an assertion.  Supplying values that make the assertions true; those values go into the named parameters. May be a simple Comparison, Comparison List, a Boolean Expression, or a CustomAlgorithm. NextContainer is not defined for commanding. This is similar to RestrictionCriteria in other locations but optional. It is optional because some commands may be specified using a FixedValueEntries and Arguments only and no restrictions will exist in that case. Parameters specified in the expressions do not need to be in the entire EntryList, but they usually are. In addition they may be anywhere in the entire construction that is visible from this location, either through this EntryList or this BaseContainer.</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="containerRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">A NameReference to another MetaCommand/CommandContainer.  SequenceContainer and CommandContainerSet/CommandContainer is allowed.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="SetRateInStreamType">
		<annotation>
			<documentation xml:lang="en">Holds a RateInStreamType and streamRef.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:RateInStreamType">
				<attribute name="streamRef" type="xtce:NameReferenceType" use="required">
					<annotation>
						<documentation xml:lang="en">A NameReference to a Stream.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RateInStreamSetType">
		<annotation>
			<documentation xml:lang="en">One or more RateInStream.</documentation>
		</annotation>
		<sequence>
			<element name="RateInStream" type="xtce:SetRateInStreamType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Because this is part of a set of rates, the stream it applies to must be differentiated.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="TimeEncodingType">
		<annotation>
			<documentation xml:lang="en">Holds the four data encodings and optional attributes appropriate for the TimeTypes.</documentation>
		</annotation>
		<choice>
			<element name="BinaryDataEncoding" type="xtce:BinaryDataEncodingType">
				<annotation>
					<documentation xml:lang="en">The most relaxed descriptive element for link values.  Use to either describe true type-less data or to describe other DataEncodings which cannot be described with what has been defined.  For example a "strange" floating point data encoding not captured here in the given FloatDataEncoding. Calibration is given as optional custom algorithms.</documentation>
				</annotation>
			</element>
			<element name="FloatDataEncoding" type="xtce:FloatDataEncodingType">
				<annotation>
					<documentation xml:lang="en">Describe either IEEE-754 or MIL-1750A link values.  If your format is not here, use the BinaryDataEncoding.  Child elements address the size of the value, calibration, bit and byte order, and so forth.</documentation>
				</annotation>
			</element>
			<element name="IntegerDataEncoding" type="xtce:IntegerDataEncodingType">
				<annotation>
					<documentation xml:lang="en">Describe a variety of integer encodings of link values such as twos complement, child elements include bit/byte order, calibration and bit size of link value.</documentation>
				</annotation>
			</element>
			<element name="StringDataEncoding" type="xtce:StringDataEncodingType">
				<annotation>
					<documentation xml:lang="en">Describe strings encoded in two ways, UTF-8 or UTF-16.  No calibrators are given but bit/byte order and several forms of string size are available.</documentation>
				</annotation>
			</element>
		</choice>
		<attribute name="units" type="xtce:TimeUnits" default="seconds">
			<annotation>
				<documentation xml:lang="en">seconds, picaoSeconds, days, months or years.</documentation>
			</annotation>
		</attribute>
		<attribute name="scale" type="double" default="1">
			<annotation>
				<documentation xml:lang="en">Scale the DataEncoding in y=mx + b linear equation.  This is m, the slope.</documentation>
			</annotation>
		</attribute>
		<attribute name="offset" type="double" default="0">
			<annotation>
				<documentation xml:lang="en">Offset the DataEncoding in y=mx + b linear equation.  This is b, the intercept or offset.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="SplineCalibratorType">
		<annotation>
			<documentation xml:lang="en">Holds a series of spline points, order and whether to extrapolate past the points given.</documentation>
		</annotation>
		<sequence>
			<element name="SplinePoint" type="xtce:SplinePointType" minOccurs="2" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Two or more points form a spline, a curve on a x-y graph.  Common curves are linear piecewise sets, and various higher order curves.  For linear piecewise sets, the values between the points are interpolated and the points themselves are continuous or in the set of solutions.  However for higher order splines, whether the points given are continuous or not is user defined.</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="order" type="positiveInteger" default="1">
			<annotation>
				<documentation xml:lang="en">Order=1 is a linear piecewise set , order=2 is a quadratic set, order=3 is a cubic set, and so on.</documentation>
			</annotation>
		</attribute>
		<attribute name="extrapolate" type="boolean" default="false">
			<annotation>
				<documentation xml:lang="en">If true extrapolate values past the end points given.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="MathOperationCalibratorType">
		<annotation>
			<documentation xml:lang="en">Holds operands and operators for the math operation.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:MathOperationType"/>
		</complexContent>
	</complexType>
	<complexType name="CheckWindowAlgorithmsType">
		<annotation>
			<documentation xml:lang="en">Holds a start and stop algorithm for a check window.</documentation>
		</annotation>
		<sequence>
			<element name="StartCheck" type="xtce:InputAlgorithmType">
				<annotation>
					<documentation xml:lang="en">The check window start as an algorithm.</documentation>
				</annotation>
			</element>
			<element name="StopTime" type="xtce:InputAlgorithmType">
				<annotation>
					<documentation xml:lang="en">The check window stop as an algorithm.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="CheckWindowType">
		<annotation>
			<documentation xml:lang="en">Holds a time to stop checking and optional time to start checking and whether window is relative to command release or last verifier.</documentation>
		</annotation>
		<attribute name="timeToStartChecking" type="xtce:RelativeTimeType">
			<annotation>
				<documentation xml:lang="en">The time to start checking relative to some absolute time.</documentation>
			</annotation>
		</attribute>
		<attribute name="timeToStopChecking" type="xtce:RelativeTimeType" use="required">
			<annotation>
				<documentation xml:lang="en">The time to stop checking relative to some absolute time.</documentation>
			</annotation>
		</attribute>
		<attribute name="timeWindowIsRelativeTo" type="xtce:TimeWindowIsRelativeToType" default="timeLastVerifierPassed">
			<annotation>
				<documentation xml:lang="en">The time window is relative to the command release or the time the last verifier passed (default).</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ChangeType">
		<annotation>
			<documentation xml:lang="en">Holds a decimal value.</documentation>
		</annotation>
		<attribute name="value" type="decimal" use="required">
			<annotation>
				<documentation xml:lang="en">A decimal value.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ParameterValueChangeType">
		<annotation>
			<documentation xml:lang="en">Holds a ParameterRef and change value.</documentation>
		</annotation>
		<sequence>
			<element name="ParameterRef" type="xtce:ParameterRefType">
				<annotation>
					<documentation xml:lang="en">A NameReference to a parameter whose value will be set the value below.</documentation>
				</annotation>
			</element>
			<element name="Change" type="xtce:ChangeType">
				<annotation>
					<documentation xml:lang="en">A decimal value that will become the named parameters value.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ComparisonListType">
		<annotation>
			<documentation xml:lang="en">Holds one or more comparisons.</documentation>
		</annotation>
		<sequence>
			<element name="Comparison" type="xtce:ComparisonType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more comparisons.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="EnumerationListType">
		<annotation>
			<documentation xml:lang="en">Holds one or more Enumeration.</documentation>
		</annotation>
		<sequence>
			<element name="Enumeration" type="xtce:EnumerationRangeType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Holds a value or value range and label.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="EnumerationAlarmItemType">
		<annotation>
			<documentation xml:lang="en">Holds an alarmLevel and enumerationLabel.</documentation>
		</annotation>
		<attribute name="alarmLevel" type="xtce:AlarmLevels" use="required">
			<annotation>
				<documentation xml:lang="en">Six levels are supported: normal, watch, warning, distress, critical and severe.</documentation>
			</annotation>
		</attribute>
		<attribute name="enumerationLabel" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">The label of the enumeration that will trigger the alarm.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="EnumerationAlarmListType">
		<annotation>
			<documentation xml:lang="en">Holds a list of EnumerationAlarms.</documentation>
		</annotation>
		<sequence>
			<element name="EnumerationAlarm" type="xtce:EnumerationAlarmItemType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more EnumeraitionAlarm, supply the level and label associated with the enumeration to trigger on.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="OutputParameterRefType">
		<annotation>
			<documentation xml:lang="en">Holds a parameterRef and optional outputName.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterRefType">
				<attribute name="outputName" type="string">
					<annotation>
						<documentation xml:lang="en">An optional alternative name to the output parameter above, an alias.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="OutputSetType">
		<annotation>
			<documentation xml:lang="en">Holds one or more OutputParameterRef.</documentation>
		</annotation>
		<sequence>
			<element name="OutputParameterRef" type="xtce:OutputParameterRefType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Names an output parameter to the algorithm.  There are two attributes to OutputParm, outputName and parameterName. parameterName is a parameter reference name for a parameter that will be updated by this algorithm.  outputName is an optional alias name for the output parameter.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="InputAlgorithmParameterInstanceRefType">
		<annotation>
			<documentation xml:lang="en">Holds a ParameterInstanceref and optional input name, or alias.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterInstanceRefType">
				<attribute name="inputName" type="string">
					<annotation>
						<documentation xml:lang="en">An optional alias for the parameterRef.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ConstantType">
		<annotation>
			<documentation xml:lang="en">Holds a constant value and optional constant name.</documentation>
		</annotation>
		<attribute name="constantName" type="string">
			<annotation>
				<documentation xml:lang="en">An optional name for the constant.</documentation>
			</annotation>
		</attribute>
		<attribute name="value" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">The value of the constant which must be converted to the proper data type.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="InputSetType">
		<annotation>
			<documentation xml:lang="en">Holds one or more ParameterInstanceRefs or Constants.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="ParameterInstanceRef" type="xtce:InputAlgorithmParameterInstanceRefType">
				<annotation>
					<documentation xml:lang="en">Names an input parameter to the algorithm.  There are two attributes to InputParm, inputName and parameterName. parameterName is a parameter reference name for a parameter that will be used in this algorithm.  inputName is an optional alias name for the input parameter. </documentation>
				</annotation>
			</element>
			<element name="Constant" type="xtce:ConstantType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Names and provides a value for a constant input to the algorithm.  There are two attributes to Constant, constantName and value.  constantName is a variable name in the algorithm to be executed.  value is the value of the constant to be used.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="AlgorithmTextType">
		<annotation>
			<documentation xml:lang="en">Holds text for an algorithm and a designation for the language it is expressed in that is optional.</documentation>
		</annotation>
		<simpleContent>
			<extension base="string">
				<attribute name="language" type="string" default="pseudo">
					<annotation>
						<documentation xml:lang="en">An optional language name the algorithm is expressed in, defaults to pseudo.  </documentation>
					</annotation>
				</attribute>
			</extension>
		</simpleContent>
	</complexType>
	<complexType name="ExternalAlgorithmType">
		<annotation>
			<documentation xml:lang="en">Holds an implementationName and algorithmLocation.</documentation>
		</annotation>
		<attribute name="implementationName" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">The name of the external algorithm that is meaninful to implementation.</documentation>
			</annotation>
		</attribute>
		<attribute name="algorithmLocation" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">The algorithms location that is meaningful to the implementation.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ExternalAlgorithmSetType">
		<annotation>
			<documentation xml:lang="en">Holds ExternalAlgorithms.</documentation>
		</annotation>
		<sequence>
			<element name="ExternalAlgorithm" type="xtce:ExternalAlgorithmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">This is the external algorithm.  Multiple entries are provided so that the same database may be used for multiple implementations, holds one or more.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ServiceSetType">
		<annotation>
			<documentation xml:lang="en">Holds Services.</documentation>
		</annotation>
		<sequence>
			<element name="Service" type="xtce:ServiceType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more Service which is a logical grouping of either Messages or Containers.  The meaning of this grouping is implementation defined.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="AutoInvertType">
		<annotation>
			<documentation xml:lang="en">Holds an autoinvert algorithm and optional bad frames to invert attribute.</documentation>
		</annotation>
		<sequence>
			<element name="InvertAlgorithm" type="xtce:InputAlgorithmType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">An InvertAlgorith is an InputAlgorithm, use it to describe the inversion process.</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="badFramesToAutoInvert" type="positiveInteger" default="1024">
			<annotation>
				<documentation xml:lang="en">Specify how many bad frames to autoinvert, the default is 1024.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="SyncPatternType">
		<annotation>
			<documentation xml:lang="en">Holds a sync pattern and related attributes.</documentation>
		</annotation>
		<attribute name="pattern" type="hexBinary" use="required">
			<annotation>
				<documentation xml:lang="en">CCSDS ASM for non-turbocoded frames = 1acffc1d.</documentation>
			</annotation>
		</attribute>
		<attribute name="bitLocationFromStartOfContainer" type="integer" default="0">
			<annotation>
				<documentation xml:lang="en">Bit offset for sync, default is zero.</documentation>
			</annotation>
		</attribute>
		<attribute name="mask" type="hexBinary">
			<annotation>
				<documentation xml:lang="en">An optional mask for the pattern.</documentation>
			</annotation>
		</attribute>
		<attribute name="maskLengthInBits" type="positiveInteger">
			<annotation>
				<documentation xml:lang="en">Truncate the mask from the left.</documentation>
			</annotation>
		</attribute>
		<attribute name="patternLengthInBits" type="positiveInteger" use="required">
			<annotation>
				<documentation xml:lang="en">Truncate the pattern from the left.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="FloatValidRangeType">
		<annotation>
			<documentation xml:lang="en">Holds the min/max of a ValidRange for floating point.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:FloatRangeType">
				<attribute name="validRangeAppliesToCalibrated" type="boolean" default="false">
					<annotation>
						<documentation xml:lang="en">The range specified applies to the destination data type if true, or the raw source data type if false. The default is false and reflects the more likely scenario of checking raw values before conversion or calibration in telemetry.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="NumberFormatType">
		<annotation>
			<documentation xml:lang="en">Holds various formating properties for a number.</documentation>
		</annotation>
		<attribute name="numberBase" type="xtce:RadixType" use="optional" default="Decimal">
			<annotation>
				<documentation xml:lang="en">The radix or base, four are supported: decimal (base 10), hexadecimal (base 16), octal (base 8), and binary (base 2).</documentation>
			</annotation>
		</attribute>
		<attribute name="minimumFractionDigits" type="nonNegativeInteger" use="optional">
			<annotation>
				<documentation xml:lang="en">The minimum number of digits to the right of the decimal place.</documentation>
			</annotation>
		</attribute>
		<attribute name="maximumFractionDigits" type="nonNegativeInteger" use="optional">
			<annotation>
				<documentation xml:lang="en">The maximum number of digits to the left of the decimal place.</documentation>
			</annotation>
		</attribute>
		<attribute name="minimumIntegerDigits" type="nonNegativeInteger" use="optional">
			<annotation>
				<documentation xml:lang="en">The minimum number of digits for an integer.</documentation>
			</annotation>
		</attribute>
		<attribute name="maximumIntegerDigits" type="nonNegativeInteger" use="optional">
			<annotation>
				<documentation xml:lang="en">The maximum of digits for an integer.</documentation>
			</annotation>
		</attribute>
		<attribute name="negativeSuffix" type="string" use="optional">
			<annotation>
				<documentation xml:lang="en">If it's negative put this after the number.</documentation>
			</annotation>
		</attribute>
		<attribute name="positiveSuffix" type="string" use="optional">
			<annotation>
				<documentation xml:lang="en">If it's positive put this after the number.</documentation>
			</annotation>
		</attribute>
		<attribute name="negativePrefix" type="string" use="optional" default="-">
			<annotation>
				<documentation xml:lang="en">If it's negative put this before the number.</documentation>
			</annotation>
		</attribute>
		<attribute name="positivePrefix" type="string" use="optional">
			<annotation>
				<documentation xml:lang="en">If it's positive put this before the number.</documentation>
			</annotation>
		</attribute>
		<attribute name="showThousandsGrouping" type="boolean" use="optional" default="true">
			<annotation>
				<documentation xml:lang="en">Group by thousands.</documentation>
			</annotation>
		</attribute>
		<attribute name="notation" type="xtce:NotationType" use="optional" default="normal">
			<annotation>
				<documentation xml:lang="en">One of normal, scientific or engineering.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="TermType">
		<annotation>
			<documentation xml:lang="en">Holds a coefficient and exponent.</documentation>
		</annotation>
		<attribute name="coefficient" type="double" use="required">
			<annotation>
				<documentation xml:lang="en">The coefficient of a polynomial term.</documentation>
			</annotation>
		</attribute>
		<attribute name="exponent" type="nonNegativeInteger" use="required">
			<annotation>
				<documentation xml:lang="en">The exponent of a polynomial term.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="IntegerValidRangeType">
		<annotation>
			<documentation xml:lang="en">Holds an integer range and flag denoting whether the range is calculated on the value using the source data type or the destination data type.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:IntegerRangeType">
				<attribute name="validRangeAppliesToCalibrated" type="boolean" default="false">
					<annotation>
						<documentation xml:lang="en">Ranges are applied to the raw source DataEncoding data type or against the calibrated or converted destination data type.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StaticAlarmRangesType">
		<annotation>
			<documentation xml:lang="en">Holds ranges and a flag specifying whether to interpret the ranges as inside or outside. </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmRangesType">
				<attribute name="alarmForm" type="xtce:AlarmFormType" default="inside">
					<annotation>
						<documentation xml:lang="en">Inside alarms have the normal/nominal range inside all the other ranges, the ranges form increasingly severe bands.  Outside alrams have the normal/nominal ranges on the outside and the range bands become more severe inwards.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ChangeAlarmRangesType">
		<annotation>
			<documentation xml:lang="en">Holds alarms ranges and various properties related to either delta alarms or change over time alarms.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmRangesType">
				<attribute name="changeType" type="xtce:ChangeAlarmType" default="changePerSecond">
					<annotation>
						<documentation xml:lang="en">Either change per second or change per sample.</documentation>
					</annotation>
				</attribute>
				<attribute name="changeBasis" type="xtce:ChangeAlarmBasisType" default="absoluteChange">
					<annotation>
						<documentation xml:lang="en">Either absolute change or percentage change.</documentation>
					</annotation>
				</attribute>
				<attribute name="spanOfInterestInSamples" type="positiveInteger" default="1">
					<annotation>
						<documentation xml:lang="en">If changeType is changePerSample then the span of sample can be described here.  The default is one, meaning every sample.</documentation>
					</annotation>
				</attribute>
				<attribute name="spanOfInterestInSeconds" type="decimal" default="0">
					<annotation>
						<documentation xml:lang="en">If changeType is changePerSecond then the span of seconds can be described here.  The default is zero, meaning the system calculates the change in time with no fixed sample time.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="PhysicalAddressSetType">
		<annotation>
			<documentation xml:lang="en">Holds the set of PhysicalAddress.</documentation>
		</annotation>
		<sequence>
			<element name="PhysicalAddress" type="xtce:PhysicalAddressType" minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Contains the address (e.g., channel information) required to process the spacecraft telemetry streams. May be an onboard id, a mux address, or a physical location.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="FlagType">
		<annotation>
			<documentation xml:lang="en">Holds a flag size in bits and a flag type of either all 1s or 0s.</documentation>
		</annotation>
		<attribute name="flagSizeInBits" type="positiveInteger" default="6">
			<annotation>
				<documentation xml:lang="en">Sync flag size in bits.</documentation>
			</annotation>
		</attribute>
		<attribute name="flagBitType" type="xtce:FlagFormType" default="ones">
			<annotation>
				<documentation xml:lang="en">Either all 1s or all 0s.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="VariableFrameSyncStrategyType">
		<annotation>
			<documentation xml:lang="en">Holds various properties related to frame synchronization.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SyncStrategyType">
				<sequence>
					<element name="Flag" type="xtce:FlagType">
						<annotation>
							<documentation xml:lang="en">The pattern of bits used to look for frame synchronization.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="LeadingSizeType">
		<annotation>
			<documentation xml:lang="en">Holds a size in bits of SizeTag.</documentation>
		</annotation>
		<attribute name="sizeInBitsOfSizeTag" type="positiveInteger" default="16">
			<annotation>
				<documentation xml:lang="en">How many bits does the size tag or marker itself take.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="StringSizeInBitsType">
		<annotation>
			<documentation xml:lang="en">Holds the length of a string as either fixed, with a terminating character or with a leading size indication.</documentation>
		</annotation>
		<choice>
			<element name="Fixed" type="xtce:IntegerValueType">
				<annotation>
					<documentation xml:lang="en">A fixed length string is either a literal specified in FixedValue, found by looking up the value in a DynamicValue, or the value return by DiscreteLookupList.  In either case, once calculated the string remains that length.</documentation>
				</annotation>
			</element>
			<element name="TerminationChar" type="hexBinary">
				<annotation>
					<documentation xml:lang="en">Like C strings, they are terminated with a special string, usually a null character.  This implies the string could vary in length.</documentation>
				</annotation>
			</element>
			<element name="LeadingSize" type="xtce:LeadingSizeType">
				<annotation>
					<documentation xml:lang="en">Like Pascal strings, the size of the string is given as an integer at the start of the string.  SizeTag must be an unsigned Integer.  The length could also vary and only differs in that the leading bits contain its size.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="StringAlarmListStringAlarmType">
		<annotation>
			<documentation xml:lang="en">Holds and alarm level and pattern to trigger the alarm.</documentation>
		</annotation>
		<attribute name="alarmLevel" type="xtce:AlarmLevels" use="required">
			<annotation>
				<documentation xml:lang="en">Either normal, watch, warning, distress, critical or severe.</documentation>
			</annotation>
		</attribute>
		<attribute name="matchPattern" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">The pattern to match to trigger the alarm, a regular expression.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="StringAlarmListType">
		<annotation>
			<documentation xml:lang="en">A list of StringAlarm.</documentation>
		</annotation>
		<sequence>
			<element name="StringAlarm" type="xtce:StringAlarmListStringAlarmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more StringAlarm, pattern may be a regular expression. </documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="TimeAlarmStaticAlarmRangesType">
		<annotation>
			<documentation xml:lang="en">Holds alarm ranges for time parameters, and the time units the ranges or given in.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmRangesType">
				<attribute name="timeUnits" type="xtce:TimeUnits" default="seconds">
					<annotation>
						<documentation xml:lang="en">Specify the time units of the ranges, either seconds, picoSeconds, days, months or years -- seconds is the default.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ChangePerSecondAlarmRangesType">
		<annotation>
			<documentation xml:lang="en">Holds alarm ranges for time parameters, and the time units the ranges or given in.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmRangesType">
				<attribute name="timeUnits" type="xtce:TimeUnits" default="seconds">
					<annotation>
						<documentation xml:lang="en">Specify the time units of the ranges, either seconds, picoSeconds, days, months or years -- seconds is the default.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="OffsetType">
		<annotation>
			<documentation xml:lang="en">Holds an offset.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:IntegerValueType">
				<attribute name="offsetSizeInBits" type="positiveInteger" default="1">
					<annotation>
						<documentation xml:lang="en">The size in bits of the offset.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ToStringType">
		<annotation>
			<documentation xml:lang="en">Holds various properties associated with either using a Java style NumberFormat, or using an enumerated list.   </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NumberToStringType"/>
		</complexContent>
	</complexType>
	<complexType name="FloatContextCalibratorListType">
		<annotation>
			<documentation xml:lang="en">Holds a list of context calibrators.</documentation>
		</annotation>
		<sequence>
			<element name="ContextCalibrator" type="xtce:ContextCalibratorType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more context calibrators.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="IntegerContextCalibratorListType">
		<annotation>
			<documentation xml:lang="en">A list of context calibrators.</documentation>
		</annotation>
		<sequence>
			<element name="ContextCalibrator" type="xtce:ContextCalibratorType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more context calibrators.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="DerivationType">
		<annotation>
			<documentation xml:lang="en">Holds properties related to a user defined mathematical expression consisting of a variety of operations and operands.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:MathOperationType"/>
		</complexContent>
	</complexType>
	<complexType name="FixedFrameSyncStrategyType">
		<annotation>
			<documentation xml:lang="en">Holds various properties related to fixed frame synchronization strategies.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SyncStrategyType">
				<sequence>
					<element name="SyncPattern" type="xtce:SyncPatternType">
						<annotation>
							<documentation xml:lang="en">The pattern of bits used to look for frame synchronization.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringContextAlarmListType">
		<annotation>
			<documentation xml:lang="en">A list of context alarms.</documentation>
		</annotation>
		<sequence>
			<element name="ContextAlarm" type="xtce:StringContextAlarmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more context alarms.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="EnumerationContextAlarmListType">
		<annotation>
			<documentation xml:lang="en">A list of context alarms.</documentation>
		</annotation>
		<sequence>
			<element name="ContextAlarm" type="xtce:EnumerationContextAlarmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more context alarms.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="IntegerContextAlarmListType">
		<annotation>
			<documentation xml:lang="en">A list of context alarms.</documentation>
		</annotation>
		<sequence>
			<element name="ContextAlarm" type="xtce:NumericContextAlarmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more context alarms.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="BinaryContextAlarmListType">
		<annotation>
			<documentation xml:lang="en">Holds a list of context alarms.</documentation>
		</annotation>
		<sequence>
			<element name="ContextAlarm" type="xtce:BinaryContextAlarmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Holds one or more context alarms.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="FloatContextAlarmListType">
		<annotation>
			<documentation xml:lang="en">Holds a list of context alarms.</documentation>
		</annotation>
		<sequence>
			<element name="ContextAlarm" type="xtce:NumericContextAlarmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Holds one or more context alarms.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="BooleanContextAlarmListType">
		<annotation>
			<documentation xml:lang="en">A list of context alarms.</documentation>
		</annotation>
		<sequence>
			<element name="ContextAlarm" type="xtce:BooleanContextAlarmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more context alarms.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="RelativeTimeContextAlarmListType">
		<annotation>
			<documentation xml:lang="en">Holds a list of context alarms.</documentation>
		</annotation>
		<sequence>
			<element name="ContextAlarm" type="xtce:TimeContextAlarmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">One or more context alarms.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="BinaryContextAlarmType">
		<annotation>
			<documentation xml:lang="en">Holds alarm properties associated with a binary parameter and a context.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BinaryAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:MatchCriteriaType">
						<annotation>
							<documentation xml:lang="en">An expression that must be true in order for the alarm to trigger.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BooleanContextAlarmType">
		<annotation>
			<documentation xml:lang="en">Holds properties for alarms associated with boolean parameters and a context.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BooleanAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:MatchCriteriaType">
						<annotation>
							<documentation xml:lang="en">An expression that must be true in order for the alarm to trigger.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="EnumerationContextAlarmType">
		<annotation>
			<documentation xml:lang="en">Holds enumeration alarm properties and a context.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:EnumerationAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:MatchCriteriaType">
						<annotation>
							<documentation xml:lang="en">An expression that must be true for the alarm to trigger.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringContextAlarmType">
		<annotation>
			<documentation xml:lang="en">Holds string alarm properties and a context associated with it.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:StringAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:MatchCriteriaType">
						<annotation>
							<documentation xml:lang="en">An expression that must be true for the alarm to be triggered.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringParameterType">
		<annotation>
			<documentation xml:lang="en">For telemetry this is a destination data type for a string, for commanding this is a source data type for a string.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:StringDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:StringAlarmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking that is applied if no ContextAlarms are applicable.  For telemetry limit checking occurs after calibration in general, although some flags in certain elements may allow this to be overridden. For commanding, limit checking should be ignored.</documentation>
						</annotation>
					</element>
					<element name="ContextAlarmList" type="xtce:StringContextAlarmListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking for different contexts, an example of a context is mission phase.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="EnumeratedParameterType">
		<annotation>
			<documentation xml:lang="en">For telemetry this is a destination data type for an enum, for commanding this is a source data type for an enum.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:EnumeratedDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:EnumerationAlarmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking that is applied if no ContextAlarms are applicable.  For telemetry limit checking occurs after calibration in general, although some flags in certain element may allow this to be overridden. For commanding, limit checking should be ignored.</documentation>
						</annotation>
					</element>
					<element name="ContextAlarmList" type="xtce:EnumerationContextAlarmListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking for different contexts, an example of a context is mission phase.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="IntegerParameterType">
		<annotation>
			<documentation xml:lang="en">For telemetry this is a destination data type for an integer, for commanding this is a source data type for a integer.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:IntegerDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:NumericAlarmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking that is applied if no ContextAlarms are applicable.  For telemetry limit checking occurs after calibration in general, although some flags in certain elements may allow this to be overridden. For commanding, limit checking should be ignored.</documentation>
						</annotation>
					</element>
					<element name="ContextAlarmList" type="xtce:IntegerContextAlarmListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking for different contexts, an example of a context is mission phase.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BinaryParameterType">
		<annotation>
			<documentation xml:lang="en">For telemetry this is a destination data type for a binary, for commanding this is a source data type for a binary.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BinaryDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:BinaryAlarmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking that is applied if no ContextAlarms are applicable.  For telemetry limit checking occurs after calibration in general, although some flags in certain elements may allow this to be overridden. For commanding, limit checking should be ignored.</documentation>
						</annotation>
					</element>
					<element name="ContextAlarmList" type="xtce:BinaryContextAlarmListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking for different contexts, an example of a context is mission phase.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FloatParameterType">
		<annotation>
			<documentation xml:lang="en">For telemetry this is a destination data type for a float, for commanding this is a source data type for a float.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:FloatDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:NumericAlarmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking that is applied if no ContextAlarms are applicable.  For telemetry limit checking occurs after calibration in general, although some flags in certain elements may allow this to be overridden. For commanding, limit checking should be ignored.</documentation>
						</annotation>
					</element>
					<element name="ContextAlarmList" type="xtce:FloatContextAlarmListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking for different contexts, an example of a context is mission phase.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BooleanParameterType">
		<annotation>
			<documentation xml:lang="en">For telemetry this is a destination data type for a boolean, for commanding this is a source data type for a boolean.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BooleanDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:BooleanAlarmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking that is applied if no ContextAlarms are applicable.  For telemetry limit checking occurs after calibration in general, although some flags in certain elements may allow this to be overridden. For commanding, limit checking should be ignored.</documentation>
						</annotation>
					</element>
					<element name="ContextAlarmList" type="xtce:BooleanContextAlarmListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking for different contexts, an example of a context is mission phase.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RelativeTimeParameterType">
		<annotation>
			<documentation xml:lang="en">For telemetry this is a destination data type for a relative time, for commanding this is a source data type for a relative time.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:RelativeTimeDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:TimeAlarmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">RelativeTime value may be limit checked for Telemetry. Limit checking that is applied if no ContextAlarms are applicable.  For telemetry limit checking occurs after calibration in general, although some flags in certain elements may allow this to be overridden. For commanding, limit checking should be ignored.</documentation>
						</annotation>
					</element>
					<element name="ContextAlarmList" type="xtce:RelativeTimeContextAlarmListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Limit checking for different contexts, an example of a context is mission phase.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="AbsoluteTimeParameterType">
		<annotation>
			<documentation xml:lang="en">For telemetry this is a destination data type for an absolute time, for commanding this is a source data type for an absolute time.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AbsoluteTimeDataType"/>
		</complexContent>
	</complexType>
	<complexType name="ArrayParameterType">
		<annotation>
			<documentation xml:lang="en">For telemetry this is a destination data type for an array, for commanding this is a source data type for an array.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ArrayDataTypeType"/>
		</complexContent>
	</complexType>
	<complexType name="AggregateParameterType">
		<annotation>
			<documentation xml:lang="en">For telemetry this is a destination data type for an aggregate, for commanding this is a source data type for an aggregate.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AggregateDataType"/>
		</complexContent>
	</complexType>
	<complexType name="CommandContainerType">
		<annotation>
			<documentation xml:lang="en">Holds information related to containers for CommandContainerSet.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceContainerType"/>
		</complexContent>
	</complexType>
	<complexType name="BinaryAlarmType">
		<annotation>
			<documentation xml:lang="en">Holds information related to a binary alarm.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType"/>
		</complexContent>
	</complexType>
	<complexType name="EnumerationRangeType">
		<annotation>
			<documentation xml:lang="en">Contains a value and an associated string label. The value may be a range by specifying an upper maxValue range.  If not a range, do not specify the maxValue.</documentation>
		</annotation>
		<attribute name="value" type="integer" use="required">
			<annotation>
				<documentation xml:lang="en">Integer value associated with the label.</documentation>
			</annotation>
		</attribute>
		<attribute name="maxValue" type="integer" use="optional">
			<annotation>
				<documentation xml:lang="en">Optional upper range value, inclusive for range labels.</documentation>
			</annotation>
		</attribute>
		<attribute name="label" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">The label associated with the value.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<simpleType name="BasisType">
		<annotation>
			<documentation xml:lang="en">Enumeration of either per second or per contianer update.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="perSecond"/>
			<enumeration value="perContainerUpdate"/>
		</restriction>
	</simpleType>
	<simpleType name="DataSourceType">
		<annotation>
			<documentation xml:lang="en">Enumeration of either telemetered, derived, constant or local.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="telemetered"/>
			<enumeration value="derived"/>
			<enumeration value="constant"/>
			<enumeration value="local"/>
		</restriction>
	</simpleType>
	<simpleType name="LevelsType">
		<annotation>
			<documentation xml:lang="en">Enumeration of either none, watch, warning, distress, critical or severe.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="none"/>
			<enumeration value="watch"/>
			<enumeration value="warning"/>
			<enumeration value="distress"/>
			<enumeration value="critical"/>
			<enumeration value="severe"/>
		</restriction>
	</simpleType>
	<simpleType name="BitEncodingType">
		<annotation>
			<documentation xml:lang="en">Enumeration of various bit encoding methods.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="NRZL"/>
			<enumeration value="NRZM"/>
			<enumeration value="NRZS"/>
			<enumeration value="BiPhaseL"/>
			<enumeration value="BiPhaseM"/>
			<enumeration value="BiPhaseS"/>
		</restriction>
	</simpleType>
	<simpleType name="FloatPrecisionsType">
		<annotation>
			<documentation xml:lang="en">Enumeration that roughly correspond to single, double or quad precisions.</documentation>
		</annotation>
		<restriction base="positiveInteger">
			<enumeration value="32"/>
			<enumeration value="64"/>
			<enumeration value="128"/>
		</restriction>
	</simpleType>
	<simpleType name="BitOrderType">
		<annotation>
			<documentation xml:lang="en">Enumeration for standard bit orderings.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="leastSignificantBitFirst"/>
			<enumeration value="mostSignificantBitFirst"/>
		</restriction>
	</simpleType>
	<simpleType name="IntegerFormatsType">
		<annotation>
			<documentation xml:lang="en">Enumeration for a variety of integer formats.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="unsigned"/>
			<enumeration value="signMagnitude"/>
			<enumeration value="twosComplement"/>
			<enumeration value="onesComplement"/>
			<enumeration value="BCD"/>
			<enumeration value="packedBCD"/>
		</restriction>
	</simpleType>
	<simpleType name="FloatFormatsType">
		<annotation>
			<documentation xml:lang="en">Enumeration of two popular flight floating point formats.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="IEEE754_1985"/>
			<enumeration value="MILSTD_1750A"/>
		</restriction>
	</simpleType>
	<simpleType name="FloatEncodingPrecisionsType">
		<annotation>
			<documentation xml:lang="en">Enumeration of standard precisions for FloatFormatsType merged into one.</documentation>
		</annotation>
		<restriction base="positiveInteger">
			<enumeration value="32"/>
			<enumeration value="48"/>
			<enumeration value="64"/>
			<enumeration value="80"/>
			<enumeration value="128"/>
		</restriction>
	</simpleType>
	<simpleType name="StringFormatsType">
		<annotation>
			<documentation xml:lang="en">Enumeration of two common encodings of unicode.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="UTF-8"/>
			<enumeration value="UTF-16"/>
		</restriction>
	</simpleType>
	<simpleType name="EpochDatesType">
		<annotation>
			<documentation xml:lang="en">Enumeration of standard epoch dates, TAI is Jan 1 1958.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="TAI"/>
		</restriction>
	</simpleType>
	<simpleType name="ValidationStatusType">
		<annotation>
			<documentation xml:lang="en">Enumeration of various validation stages.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="Unknown"/>
			<enumeration value="Working"/>
			<enumeration value="Draft"/>
			<enumeration value="Test"/>
			<enumeration value="Validated"/>
			<enumeration value="Released"/>
			<enumeration value="Withdrawn"/>
		</restriction>
	</simpleType>
	<simpleType name="ReferenceLocationType">
		<annotation>
			<documentation xml:lang="en">Enumeration of various container entry offsets.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="containerStart"/>
			<enumeration value="containerEnd"/>
			<enumeration value="previousEntry"/>
			<enumeration value="nextEntry"/>
		</restriction>
	</simpleType>
	<simpleType name="ParityFormType">
		<annotation>
			<documentation xml:lang="en">Enumeration of even and odd.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="Even"/>
			<enumeration value="Odd"/>
		</restriction>
	</simpleType>
	<simpleType name="ReferenceType">
		<annotation>
			<documentation xml:lang="en">Enumeration of start and end.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="start"/>
			<enumeration value="end"/>
		</restriction>
	</simpleType>
	<simpleType name="TimeWindowIsRelativeToType">
		<annotation>
			<documentation xml:lang="en">Enumeration of two styles of time windows.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="commandRelease"/>
			<enumeration value="timeLastVerifierPassed"/>
		</restriction>
	</simpleType>
	<simpleType name="NotationType">
		<annotation>
			<documentation xml:lang="en">Enumeration of typical number display formats.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="normal"/>
			<enumeration value="scientific"/>
			<enumeration value="engineering"/>
		</restriction>
	</simpleType>
	<simpleType name="AlarmFormType">
		<annotation>
			<documentation xml:lang="en">Enumeration of inside or outside for alarms.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="inside"/>
			<enumeration value="outside"/>
		</restriction>
	</simpleType>
	<simpleType name="ChangeAlarmType">
		<annotation>
			<documentation xml:lang="en">Enumeration of type of change alarms.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="changePerSecond"/>
			<enumeration value="changePerSample"/>
		</restriction>
	</simpleType>
	<simpleType name="ChangeAlarmBasisType">
		<annotation>
			<documentation xml:lang="en">Enumeration of type of change alarm's basis.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="absoluteChange"/>
			<enumeration value="percentageChange"/>
		</restriction>
	</simpleType>
	<simpleType name="FlagFormType">
		<annotation>
			<documentation xml:lang="en">Enumeration of either zeros and ones.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="zeros"/>
			<enumeration value="ones"/>
		</restriction>
	</simpleType>
</schema>
